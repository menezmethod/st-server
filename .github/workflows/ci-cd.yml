name: ST Server CI/CD

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GKE_REGION }}
  REPOSITORY: st-trader-dev-repo
  NAMESPACE: ${{ secrets.GCP_NAMESPACE }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [st-auth-svc, st-gateway, st-journal-svc]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.22'
      - name: Build and Test ${{ matrix.service }}
        run: |
          cd src/${{ matrix.service }}/cmd
          go build
          go test ./...

  deploy:
    name: Deploy to GKE
    needs: build-and-test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: st-auth-svc
            port: 50051
          - service: st-gateway
            port: 8080
          - service: st-journal-svc
            port: 50052
    steps:
      - uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@v2.1.0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          install_components: 'gke-gcloud-auth-plugin'
      - name: GCP Authentication
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > gcp-credentials.json
          gcloud auth activate-service-account --key-file=gcp-credentials.json
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}"
          docker build --build-arg PORT=${{ secrets['SVC_' + matrix.service + '_PORT'] }} --build-arg DB_URL=${{ secrets['SVC_' + matrix.service + '_DB_URL'] }} --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} -t $IMAGE_TAG -f src/${{ matrix.service }}/Dockerfile .
          docker push $IMAGE_TAG
      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.REGION }} --project ${{ env.PROJECT_ID }}
      - name: Deploy Services to GKE
        run: |
          ${GITHUB_WORKSPACE}/k8s/deploy-to-gke.sh ${{ matrix.service }} ${{ matrix.port }} "${{ github.sha }}" "${{ github.ref }}" "${{ github.event.pull_request.number }}"

  cleanup-pr:
    name: Clean Up Pull Requests
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@v2.1.0
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Get GKE credentials
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.REGION }} --project ${{ env.PROJECT_ID }}
      - name: Delete PR deployments
        run: kubectl delete all,ingress,configmap,secret -l pr-number=${{ github.event.pull_request.number }} --namespace ${{ env.NAMESPACE }}
