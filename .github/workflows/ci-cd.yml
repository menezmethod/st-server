name: ST Server CI/CD

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GKE_REGION }}
  REPOSITORY: st-trader-dev-repo
  NAMESPACE: ${{ secrets.GCP_NAMESPACE }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ st-auth-svc, st-gateway, st-journal-svc ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22'
      - name: Build and Test ${{ matrix.service }}
        run: |
          cd src/${{ matrix.service }}/cmd
          go build
          go test ./...

  deploy:
    name: Deploy to GKE
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: st-auth-svc
            port: 50051
          - service: st-gateway
            port: 8080
          - service: st-journal-svc
            port: 50052
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.1.0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          install_components: 'gke-gcloud-auth-plugin'
      - name: GCP Authentication
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > ${{ github.workspace }}/gcp-credentials.json
          gcloud auth activate-service-account --key-file=${{ github.workspace }}/gcp-credentials.json
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}"
          if [ "${{ matrix.service }}" == "st-auth-svc" ]; then
            docker build \
              --build-arg PORT=${{ secrets.SVC_AUTH_PORT }} \
              --build-arg DB_URL=${{ secrets.SVC_AUTH_DB_URL }} \
              --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -t $IMAGE_TAG -f src/${{ matrix.service }}/Dockerfile .
          elif [ "${{ matrix.service }}" == "st-journal-svc" ]; then
            docker build \
              --build-arg PORT=${{ secrets.SVC_JOURNAL_PORT }} \
              --build-arg DB_URL=${{ secrets.SVC_JOURNAL_DB_URL }} \
              --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -t $IMAGE_TAG -f src/${{ matrix.service }}/Dockerfile .
          elif [ "${{ matrix.service }}" == "st-gateway" ]; then
            docker build \
              --build-arg API_VERSION=${{ secrets.API_VERSION }} \
              --build-arg PORT=${{ secrets.SVC_GATEWAY_PORT }} \
              --build-arg AUTH_SVC_URL=${{ secrets.SVC_AUTH_URL }}:${{ secrets.SVC_AUTH_PORT }} \
              --build-arg JOURNAL_SVC_URL=${{ secrets.SVC_JOURNAL_URL }}:${{ secrets.SVC_JOURNAL_PORT }} \
              --build-arg JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -t $IMAGE_TAG -f src/${{ matrix.service }}/Dockerfile .
          fi
          docker push $IMAGE_TAG
      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.REGION }} --project ${{ env.PROJECT_ID }}
      - name: Deploy Services to GKE
        run: |
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}"
          DEPLOYMENT_DIR="${GITHUB_WORKSPACE}/k8s/deploy"
          DEPLOYMENT_FILE="${GITHUB_WORKSPACE}/k8s/deploy/${{ matrix.service }}${SUFFIX}-deployment.yml"
          SERVICE_FILE="${GITHUB_WORKSPACE}/k8s/deploy/${{ matrix.service }}${SUFFIX}-service.yml"

          if [[ "${{ github.ref }}" == "refs/heads/develop" ]] && [[ "${{ github.event_name }}" != "pull_request" ]]; then
            SUFFIX="-dev"
          elif [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.ref }}" != "refs/heads/develop" ]]; then
            SUFFIX="-pr-${{ github.event.pull_request.number }}-dev"
          else
            SUFFIX="-dev"
          fi
 
          mkdir -p "${DEPLOYMENT_DIR}"

          cp "${GITHUB_WORKSPACE}/k8s/base/dev/deployment.yml" "${DEPLOYMENT_FILE}"
          cp "${GITHUB_WORKSPACE}/k8s/base/dev/service.yml" "${SERVICE_FILE}"

          sed -i "s|DEPLOYMENT_NAME_PLACEHOLDER|${{ matrix.service }}${SUFFIX}|g" "${DEPLOYMENT_FILE}"
          sed -i "s|APP_LABEL_PLACEHOLDER|${{ matrix.service }}${SUFFIX}|g" "${DEPLOYMENT_FILE}"
          sed -i "s|CONTAINER_NAME_PLACEHOLDER|${{ matrix.service }}|g" "${DEPLOYMENT_FILE}"
          sed -i "s|IMAGE_PLACEHOLDER|${IMAGE_TAG}|g" "${DEPLOYMENT_FILE}"
          sed -i "s|CONTAINER_PORT_PLACEHOLDER|${{ matrix.port }}|g" "${DEPLOYMENT_FILE}"

          sed -i "s|SERVICE_NAME_PLACEHOLDER|${{ matrix.service }}${SUFFIX}|g" "${SERVICE_FILE}"
          sed -i "s|APP_LABEL_PLACEHOLDER|${{ matrix.service }}${SUFFIX}|g" "${SERVICE_FILE}"
          sed -i "s|SERVICE_PORT_PLACEHOLDER|${{ matrix.port }}|g" "${SERVICE_FILE}"
          sed -i "s|CONTAINER_PORT_PLACEHOLDER|${{ matrix.port }}|g" "${SERVICE_FILE}"

          kubectl apply -f "${DEPLOYMENT_FILE}" --namespace=${{ env.NAMESPACE }}
          kubectl apply -f "${SERVICE_FILE}" --namespace=${{ env.NAMESPACE }}
          kubectl rollout status deployment/${{ matrix.service }}${SUFFIX} --namespace=${{ env.NAMESPACE }}

  cleanup-pr:
    name: Clean Up Pull-Requests
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.1.0
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Get GKE credentials
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.REGION }} --project ${{ env.PROJECT_ID }}
      - name: Delete PR Deployments
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          kubectl delete all,ingress,configmap,secret -l pr-number=$PR_NUMBER --namespace ${{ env.NAMESPACE }}
      - name: Remove Past Images from GCR
        run: |
          CURRENT_SHA="${{ github.sha }}"
          IMAGE_PATH="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}"
          DIGESTS=$(gcloud container images list-tags $IMAGE_PATH --format='get(digest)' --filter='-tags:$CURRENT_SHA')

          for DIGEST in $DIGESTS; do
            gcloud container images delete -q "$IMAGE_PATH@$DIGEST" --force-delete-tags
          done
