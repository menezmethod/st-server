{
	"info": {
		"_postman_id": "cb77579b-7c72-4d7b-9279-b545e586b9af",
		"name": "ST Server Gateway",
		"description": "In the \"Journal\" section, the endpoints allow for the creation of new journal entries, viewing of individual or all journal entries, editing existing journal entries, and deletion of one or multiple journal entries at once.\n\nThe \"Trade\" section offers a similar set of functionalities but is focused on trade records. It includes endpoints for adding new trade records, viewing all trades or a single trade's details, editing trades, and deleting multiple trade records simultaneously.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18112029"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "LogIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.timestamp).to.exist;",
									"    pm.expect(responseData.level).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.data).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.data && jsonData.data.token) {",
									"    pm.environment.set(\"auth_token\", jsonData.data.token);",
									"    pm.test(\"Token is set in environment\", function () {",
									"        pm.expect(pm.environment.get(\"auth_token\")).to.eql(jsonData.data.token);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"luis@gimenez.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/auth/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Level, message, and status properties are present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('level');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.data && jsonData.data.token) {",
									"    pm.environment.set(\"auth_token\", jsonData.data.token);",
									"    pm.test(\"Token is set in environment\", function () {",
									"        pm.expect(pm.environment.get(\"auth_token\")).to.eql(jsonData.data.token);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"123456\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/auth/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.data.email).to.match(/^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, \"Email is not in a valid format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"123456\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"bio\" : \"From {{$randomCity}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users/2",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the expected content type of 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Validate the status field is present and equals 0\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'data' field is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Each id in data array is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function (user) {",
									"        pm.expect(user.id).to.be.a('number');",
									"        pm.expect(user.id).to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "View User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Role is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users/2",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the data object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.match(/\\S+@\\S+\\.\\S+/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users/1",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('level');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('error');",
									"});",
									"",
									"",
									"pm.test(\"Level is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.level).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.be.a('number');",
									"    pm.expect(responseData.status).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/user/3,4",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"user",
								"3,4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Journal",
			"item": [
				{
					"name": "Add Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let currentDate = new Date();",
									"",
									"let pastDays = getRandomInt(1, 90);",
									"let startDate = new Date(currentDate.getTime());",
									"startDate.setDate(startDate.getDate() - pastDays);",
									"pm.environment.set(\"randomDatePast\", startDate.toISOString());",
									"",
									"let futureDays = getRandomInt(1, 90);",
									"let endDate = new Date(currentDate.getTime());",
									"endDate.setDate(endDate.getDate() + futureDays);",
									"pm.environment.set(\"randomDateFuture\", endDate.toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.level).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.journal).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Timestamp is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
									"});",
									"",
									"",
									"pm.test(\"Start date and end date are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.journal.startDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    pm.expect(responseData.journal.endDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Name and description are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.journal.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  pm.expect(responseData.journal.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCurrencyCode}}/{{$randomCurrencyCode}}\",\n    \"description\": \"{{$randomCurrencyName}}\",\n    \"createdAt\": \"{{now}}\",\n    \"startDate\": \"{{randomDatePast}}\",\n    \"endDate\": \"{{randomDateFuture}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journal",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journal"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Journals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  ",
									"  const requiredFields = ['id', 'name', 'description', 'startDate', 'endDate', 'createdAt', 'createdBy'];",
									"  ",
									"  requiredFields.forEach(function(field) {",
									"    pm.expect(responseData[field]).to.exist;",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"StartDate is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function (journal) {",
									"        pm.expect(journal.startDate).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"EndDate is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.be.an('array');",
									"  ",
									"  responseData.data.forEach(function (journal) {",
									"    pm.expect(journal.endDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.data.length).to.be.at.least(1, \"'data' array should contain at least one element\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journals",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journals"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Journal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"StartDate is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.startDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"EndDate is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.endDate).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journal/1",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journal",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let currentDate = new Date();",
									"",
									"let pastDays = getRandomInt(1, 90);",
									"let startDate = new Date(currentDate.getTime());",
									"startDate.setDate(startDate.getDate() - pastDays);",
									"pm.environment.set(\"randomDatePast\", startDate.toISOString());",
									"",
									"let futureDays = getRandomInt(1, 90);",
									"let endDate = new Date(currentDate.getTime());",
									"endDate.setDate(endDate.getDate() + futureDays);",
									"pm.environment.set(\"randomDateFuture\", endDate.toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.level).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data.id).to.be.a('number');",
									"  pm.expect(responseData.data.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Start date and end date are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.start_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    pm.expect(responseData.end_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Name and description are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCurrencyCode}}/{{$randomCurrencyCode}}\",\n    \"description\": \"{{$randomCurrencyName}}\",\n    \"startDate\": \"{{$isoTimestamp}}\",\n    \"endDate\": \"{{$isoTimestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journal/1",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journal",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Multiple Journals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'status' field is present and has a value of 0\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.status).to.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'message' field is present in the response and is an empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.message).to.be.an('string');",
									"    pm.expect(responseData.message).to.have.lengthOf(0);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'level' field is present and is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.level).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that rowsAffected field is present and has a value of 0\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.rowsAffected).to.exist.and.to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journal/1",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journal",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Trade",
			"item": [
				{
					"name": "Add Trade",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let currentDate = new Date();",
									"",
									"let pastDays = getRandomInt(1, 90);",
									"let startDate = new Date(currentDate.getTime());",
									"startDate.setDate(startDate.getDate() - pastDays);",
									"pm.environment.set(\"randomDatePast\", startDate.toISOString());",
									"",
									"let futureDays = getRandomInt(1, 90);",
									"let endDate = new Date(currentDate.getTime());",
									"endDate.setDate(endDate.getDate() + futureDays);",
									"pm.environment.set(\"randomDateFuture\", endDate.toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'id' is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.id).to.be.a('number');",
									"    pm.expect(responseData.data.id).to.be.at.least(0, \"'id' should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that 'timeExecuted' is a valid date and time format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.timeExecuted).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date and time format\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'market' is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.market).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeExecuted\": \"{{$randomDatePast}}\",\n    \"market\": \"Forex\",\n    \"stopLoss\": {{$randomPrice}},\n    \"entryPrice\": {{$randomPrice}},\n    \"exitPrice\": {{$randomPrice}},\n    \"journal\": 1,\n    \"quantity\": {{$randomInt}},\n    \"direction\": \"Short\",\n    \"baseInstrument\": \"{{$randomCurrencyCode}}\",\n    \"quoteInstrument\": \"{{$randomCurrencyCode}}\",\n    \"takeProfit\": {{$randomPrice}},\n    \"comments\": \"Sacrificed all of my {{$randomBankAccountName}} balance.\",\n    \"createdBy\": \"Postman\",\n    \"strategy\": \"{{$randomBs}}\",\n    \"timeClosed\": \"{{$randomDateFuture}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trade",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trade"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Trades",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should contain at least one element\");",
									"});",
									"",
									"",
									"pm.test(\"Verify entryPrice, exitPrice, and stopLoss exist\", function () {",
									"    const responseData = pm.response.json();",
									"    const tradeData = responseData.data;",
									"",
									"    pm.expect(tradeData).to.be.an('array').that.is.not.empty;",
									"",
									"    tradeData.forEach(function (trade) {",
									"        pm.expect(trade.entryPrice).to.exist.and.to.be.a('number');",
									"        pm.expect(trade.exitPrice).to.exist.and.to.be.a('number');",
									"        pm.expect(trade.stopLoss).to.exist.and.to.be.a('number');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trades",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trades"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Trade",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"timeExecuted is a valid date and time format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.timeExecuted).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/, \"timeExecuted should be in valid date and time format\");",
									"});",
									"",
									"",
									"pm.test(\"Market is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.market).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trade/2",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trade",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Trade",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let currentDate = new Date();",
									"",
									"let pastDays = getRandomInt(1, 90);",
									"let startDate = new Date(currentDate.getTime());",
									"startDate.setDate(startDate.getDate() - pastDays);",
									"pm.environment.set(\"randomDatePast\", startDate.toISOString());",
									"",
									"let futureDays = getRandomInt(1, 90);",
									"let endDate = new Date(currentDate.getTime());",
									"endDate.setDate(endDate.getDate() + futureDays);",
									"pm.environment.set(\"randomDateFuture\", endDate.toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('timestamp');",
									"  pm.expect(responseData).to.have.property('level');",
									"  pm.expect(responseData).to.have.property('message');",
									"  pm.expect(responseData).to.have.property('status');",
									"  pm.expect(responseData).to.have.property('data');",
									"  pm.expect(responseData).to.have.property('error');",
									"});",
									"",
									"",
									"pm.test(\"Timestamp is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp is not in valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Level is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.level).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Data is an object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeExecuted\": \"{{$isoTimestamp}}\",\n    \"market\": \"Forex\",\n    \"stopLoss\": {{$randomPrice}},\n    \"entryPrice\": {{$randomPrice}},\n    \"exitPrice\": {{$randomPrice}},\n    \"journal\": 1,\n    \"quantity\": {{$randomPrice}},\n    \"outcome\": \"Loss\",\n    \"direction\": \"Short\",\n    \"baseInstrument\": \"{{$randomCurrencyCode}}\",\n    \"quoteInstrument\": \"{{$randomCurrencyCode}}\",\n    \"takeProfit\": {{$randomPrice}},\n    \"comments\": \"Sacrificed all of my {{$randomBankAccountName}} balance.\",\n    \"strategy\": \"RSI\",\n    \"timeClosed\": \"{{$isoTimestamp}}\",\n    \"createdBy\": \"Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trade/7",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trade",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Multiple Trades",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status, message, and level\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.level).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Level should be a string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.level).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trade/11,12",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trade",
								"11,12"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}