{
	"info": {
		"_postman_id": "cb77579b-7c72-4d7b-9279-b545e586b9af",
		"name": "ST Server Gateway",
		"description": "In the \"Journal\" section, the endpoints allow for the creation of new journal entries, viewing of individual or all journal entries, editing existing journal entries, and deletion of one or multiple journal entries at once.\n\nThe \"Trade\" section offers a similar set of functionalities but is focused on trade records. It includes endpoints for adding new trade records, viewing all trades or a single trade's details, editing trades, and deleting multiple trade records simultaneously.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18112029"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "LogIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201); ",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an(\"object\");",
									"    pm.expect(responseData).to.have.property(\"timestamp\");",
									"    pm.expect(responseData).to.have.property(\"level\");",
									"    pm.expect(responseData).to.have.property(\"message\");",
									"    pm.expect(responseData).to.have.property(\"status\");",
									"    pm.expect(responseData).to.have.nested.property(\"data.token\");",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.data && jsonData.data.token) {",
									"    pm.environment.set(\"auth_token\", jsonData.data.token);",
									"    pm.test(\"Token is set in environment\", function () {",
									"        pm.expect(pm.environment.get(\"auth_token\")).to.eql(jsonData.data.token);",
									"    });",
									"}",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an(\"object\");",
									"    pm.expect(responseData).to.have.property(\"timestamp\");",
									"    pm.expect(responseData).to.have.property(\"level\");",
									"    pm.expect(responseData).to.have.property(\"message\");",
									"    pm.expect(responseData).to.have.property(\"status\");",
									"    pm.expect(responseData).to.have.nested.property(\"data.token\");",
									"});",
									"",
									"pm.test(\"Token is in valid JWT format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    const jwtPattern = /^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/;",
									"    pm.expect(responseData.data.token).to.match(jwtPattern, \"Token should be in valid JWT format\");",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    const maxResponseTime = parseInt(pm.environment.get(\"maxResponseTime\"), 10) || 500;",
									"    pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Parse the current request body",
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"// Generate a past date",
									"let pastDate = new Date();",
									"pastDate.setDate(pastDate.getDate() - Math.floor(Math.random() * 100)); // Adjust the range as needed",
									"requestBody.timeExecuted = pastDate.toISOString();",
									"",
									"// Generate a future date",
									"let futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 100)); // Adjust the range as needed",
									"requestBody.timeClosed = futureDate.toISOString();",
									"",
									"// Update the request body",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"luis@gimenez.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/auth/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Parse the current request body",
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"// Generate a past date",
									"let pastDate = new Date();",
									"pastDate.setDate(pastDate.getDate() - Math.floor(Math.random() * 100)); // Adjust the range as needed",
									"requestBody.timeExecuted = pastDate.toISOString();",
									"",
									"// Generate a future date",
									"let futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 100)); // Adjust the range as needed",
									"requestBody.timeClosed = futureDate.toISOString();",
									"",
									"// Update the request body",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Email is in a valid format\", function () {",
									"    const isValidEmail = (email) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(isValidEmail(responseData.data.email), \"Email should be in a valid format\").to.be.true;",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an(\"object\");",
									"    pm.expect(responseData).to.have.property(\"status\");",
									"    pm.expect(responseData).to.have.nested.property(\"data.token\");",
									"});",
									"",
									"pm.test(\"Status property is an integer and matches HTTP status for success\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.be.a('number').and.to.satisfy(Number.isInteger, \"Status should be an integer\");",
									"    pm.expect(responseData.status).to.equal(201, \"Status should be 201 for successful creation\");",
									"});",
									"",
									"pm.test(\"Token is in valid JWT format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    const jwtPattern = /^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/;",
									"    pm.expect(responseData.data.token).to.match(jwtPattern, \"Token should be in valid JWT format\");",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    const maxResponseTime = parseInt(pm.environment.get(\"maxResponseTime\"), 10) || 600;",
									"    pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
									"});",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Data object has the expected properties\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data).to.include.all.keys('id', 'email', 'firstName', 'lastName', 'role', 'token', 'createdAt');",
									"});",
									"",
									"",
									"pm.test(\"First name and last name are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
									"    pm.expect(responseData.data.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Role is a valid role from a predefined list\", function () {",
									"  const validRoles = [\"ADMIN\", \"USER\"];",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.data.role).to.be.oneOf(validRoles);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"password\": \"123456\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"role\": \"ADMIN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/auth/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.data.email).to.match(/^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, \"Email is not in a valid format\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Parse the current request body",
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"// Generate a past date",
									"let pastDate = new Date();",
									"pastDate.setDate(pastDate.getDate() - Math.floor(Math.random() * 100)); // Adjust the range as needed",
									"requestBody.timeExecuted = pastDate.toISOString();",
									"",
									"// Generate a future date",
									"let futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 100)); // Adjust the range as needed",
									"requestBody.timeClosed = futureDate.toISOString();",
									"",
									"// Update the request body",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"123456\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"bio\" : \"From {{$randomCity}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users/73",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users",
								"73"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the expected content type of 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Validate the status field is present and equals 200\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate the 'data' field is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"pm.test(\"Each id in data array is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function (user) {",
									"        pm.expect(user.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "View User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users/2",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the data object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users/1",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('level');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"Level is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.level).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.be.a('number');",
									"    pm.expect(responseData.status).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random integer between min and max (inclusive)",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// Generate a random integer between 2 and 15",
									"var randomIntBetween2And15 = getRandomInt(2, 15);",
									"var randomIntBetween2And20 = getRandomInt(2, 20);",
									"",
									"",
									"// Set the generated value as an environment or global variable",
									"pm.environment.set(\"randomIntBetween2And15\", randomIntBetween2And15);",
									"pm.environment.set(\"randomIntBetween2And20\", randomIntBetween2And20);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/user/{{randomIntBetween2And15}},{{randomIntBetween2And20}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"user",
								"{{randomIntBetween2And15}},{{randomIntBetween2And20}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Journal",
			"item": [
				{
					"name": "Add Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"let pastDate = new Date();",
									"pastDate.setDate(pastDate.getDate() - Math.floor(Math.random() * 100)); ",
									"requestBody.startDate = pastDate.toISOString();",
									"",
									"let futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 100));",
									"requestBody.endDate = futureDate.toISOString();",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.level).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.journal).to.exist.and.to.be.an('object');",
									"});",
									"",
									"pm.test(\"Journal startDate is before endDate\", function () {",
									"  const responseData = pm.response.json();",
									"  const startDate = new Date(responseData.journal.startDate);",
									"  const endDate = new Date(responseData.journal.endDate);",
									"  ",
									"  pm.expect(startDate.getTime()).to.be.lessThan(endDate.getTime(), \"Start date should be before end date\");",
									"});",
									"",
									"pm.test(\"Name and description are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.journal.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  pm.expect(responseData.journal.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCurrencyCode}}/{{$randomCurrencyCode}}\",\n    \"description\": \"{{$randomCurrencyName}}\",\n    \"createdAt\": \"{{now}}\",\n    \"startDate\": \"{{randomDatePast}}\",\n    \"endDate\": \"{{randomDateFuture}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journal",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journal"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Journals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journals",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journals"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Journal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journal/45",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journal",
								"45"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Parse the current request body",
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"// Generate a past date",
									"let pastDate = new Date();",
									"pastDate.setDate(pastDate.getDate() - Math.floor(Math.random() * 100)); // Adjust the range as needed",
									"requestBody.timeExecuted = pastDate.toISOString();",
									"",
									"// Generate a future date",
									"let futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 100)); // Adjust the range as needed",
									"requestBody.timeClosed = futureDate.toISOString();",
									"",
									"// Update the request body",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCurrencyCode}}/{{$randomCurrencyCode}}\",\n    \"description\": \"{{$randomCurrencyName}}\",\n    \"startDate\": \"{{$isoTimestamp}}\",\n    \"endDate\": \"{{$isoTimestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journal/1",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journal",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Journals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random integer between min and max (inclusive)",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// Generate a random integer between 2 and 15",
									"var randomIntBetween2And15 = getRandomInt(2, 15);",
									"var randomIntBetween2And20 = getRandomInt(2, 20);",
									"",
									"",
									"// Set the generated value as an environment or global variable",
									"pm.environment.set(\"randomIntBetween2And15\", randomIntBetween2And15);",
									"pm.environment.set(\"randomIntBetween2And20\", randomIntBetween2And20);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journal/{{randomIntBetween2And15}},{{randomIntBetween2And20}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journal",
								"{{randomIntBetween2And15}},{{randomIntBetween2And20}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Trade",
			"item": [
				{
					"name": "Add Trade",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeExecuted\": \"{{randomDatePast}}\",\n    \"market\": \"Forex\",\n    \"stopLoss\": {{$randomPrice}},\n    \"entryPrice\": {{$randomPrice}},\n    \"exitPrice\": {{$randomPrice}},\n    \"journal\": 1,\n    \"quantity\": {{$randomInt}},\n    \"direction\": \"SHORT\",\n    \"baseInstrument\": \"{{$randomCurrencyCode}}\",\n    \"quoteInstrument\": \"{{$randomCurrencyCode}}\",\n    \"takeProfit\": {{$randomPrice}},\n    \"comments\": \"Sacrificed all of my {{$randomBankAccountName}} balance.\",\n    \"createdBy\": \"Postman\",\n    \"strategy\": \"{{$randomBs}}\",\n    \"timeClosed\": \"{{randomDateFuture}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trade",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trade"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Trades",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trades",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trades"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Trade",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trade/2",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trade",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Trade",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeExecuted\": \"{{$isoTimestamp}}\",\n    \"market\": \"Forex\",\n    \"stopLoss\": {{$randomPrice}},\n    \"entryPrice\": {{$randomPrice}},\n    \"exitPrice\": {{$randomPrice}},\n    \"journal\": 1,\n    \"quantity\": {{$randomPrice}},\n    \"outcome\": \"Loss\",\n    \"direction\": \"Short\",\n    \"baseInstrument\": \"{{$randomCurrencyCode}}\",\n    \"quoteInstrument\": \"{{$randomCurrencyCode}}\",\n    \"takeProfit\": {{$randomPrice}},\n    \"comments\": \"Sacrificed all of my {{$randomBankAccountName}} balance.\",\n    \"strategy\": \"RSI\",\n    \"timeClosed\": \"{{$isoTimestamp}}\",\n    \"createdBy\": \"Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trade/7",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trade",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Trades",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/trade/{{randomIntBetween2And15}},{{randomIntBetween2And20}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"trade",
								"{{randomIntBetween2And15}},{{randomIntBetween2And20}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}