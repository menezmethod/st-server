{
	"info": {
		"_postman_id": "cb77579b-7c72-4d7b-9279-b545e586b9af",
		"name": "ST Server Gateway",
		"description": "In the \"Journal\" section, the endpoints allow for the creation of new journal entries, viewing of individual or all journal entries, editing existing journal entries, and deletion of one or multiple journal entries at once.\n\nThe \"Trade\" section offers a similar set of functionalities but is focused on trade records. It includes endpoints for adding new trade records, viewing all trades or a single trade's details, editing trades, and deleting multiple trade records simultaneously.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18112029"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "LogIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"if (jsonData.data && jsonData.data.token) {",
									"    pm.environment.set(\"auth_token\", jsonData.data.token);",
									"    pm.test(\"Token is set in environment\", function () {",
									"        pm.expect(pm.environment.get(\"auth_token\")).to.eql(jsonData.data.token);",
									"    });",
									"}",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an(\"object\");",
									"    pm.expect(responseData).to.have.property(\"timestamp\");",
									"    pm.expect(responseData).to.have.property(\"level\");",
									"    pm.expect(responseData).to.have.property(\"message\");",
									"    pm.expect(responseData).to.have.property(\"status\");",
									"    pm.expect(responseData).to.have.nested.property(\"data.token\");",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an(\"object\");",
									"    pm.expect(responseData).to.have.property(\"timestamp\");",
									"    pm.expect(responseData).to.have.property(\"level\");",
									"    pm.expect(responseData).to.have.property(\"message\");",
									"    pm.expect(responseData).to.have.property(\"status\");",
									"    pm.expect(responseData).to.have.nested.property(\"data.token\");",
									"});",
									"",
									"pm.test(\"Token is in valid JWT format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    const jwtPattern = /^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/;",
									"    pm.expect(responseData.data.token).to.match(jwtPattern, \"Token should be in valid JWT format\");",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    const maxResponseTime = parseInt(pm.environment.get(\"maxResponseTime\"), 10) || 500;",
									"    pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"luis@gimenez.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/auth/login",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Email is in a valid format\", function () {",
									"    const isValidEmail = (email) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);",
									"    const responseData = pm.response.json();",
									"  ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(isValidEmail(responseData.data.email), \"Email should be in a valid format\").to.be.true;",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an(\"object\");",
									"    pm.expect(responseData).to.have.property(\"status\");",
									"    pm.expect(responseData).to.have.nested.property(\"data.token\");",
									"});",
									"",
									"pm.test(\"Status property is an integer and matches HTTP status for success\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.be.a('number').and.to.satisfy(Number.isInteger, \"Status should be an integer\");",
									"    pm.expect(responseData.status).to.equal(201, \"Status should be 201 for successful creation\");",
									"});",
									"",
									"pm.test(\"Token is in valid JWT format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    const jwtPattern = /^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*$/;",
									"    pm.expect(responseData.data.token).to.match(jwtPattern, \"Token should be in valid JWT format\");",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    const maxResponseTime = parseInt(pm.environment.get(\"maxResponseTime\"), 10) || 600;",
									"    pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
									"});",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Data object has the expected properties\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data).to.include.all.keys('id', 'email', 'firstName', 'lastName', 'role', 'token', 'createdAt');",
									"});",
									"",
									"",
									"pm.test(\"First name and last name are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
									"    pm.expect(responseData.data.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Role is a valid role from a predefined list\", function () {",
									"  const validRoles = [\"ADMIN\", \"USER\"];",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.data.role).to.be.oneOf(validRoles);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\",\n    \"password\": \"123456\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"role\": \"ADMIN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/auth/register",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.data.email).to.match(/^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/, \"Email is not in a valid format\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"let pastDate = new Date();",
									"pastDate.setDate(pastDate.getDate() - Math.floor(Math.random() * 100));",
									"requestBody.timeExecuted = pastDate.toISOString();",
									"",
									"let futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 100)); ",
									"requestBody.timeClosed = futureDate.toISOString();",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									"",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"var randomIntBetween2And15 = getRandomInt(2, 15);",
									"var randomIntBetween2And20 = getRandomInt(2, 20);",
									"",
									"",
									"pm.environment.set(\"randomIntBetween2And15\", randomIntBetween2And15);",
									"pm.environment.set(\"randomIntBetween2And20\", randomIntBetween2And20);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"123456\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"bio\" : \"From {{$randomCity}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users/73",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users",
								"73"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the expected content type of 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Validate the status field is present and equals 200\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.equal(200);",
									"});",
									"",
									"pm.test(\"Validate the 'data' field is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"pm.test(\"Each id in data array is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function (user) {",
									"        pm.expect(user.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "View User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users/2",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the data object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/users/1",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('level');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"Level is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.level).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.be.a('number');",
									"    pm.expect(responseData.status).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/user/{{randomIntBetween2And15}},{{randomIntBetween2And20}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"user",
								"{{randomIntBetween2And15}},{{randomIntBetween2And20}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Journal",
			"item": [
				{
					"name": "Add Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"let pastDate = new Date();",
									"pastDate.setDate(pastDate.getDate() - Math.floor(Math.random() * 100)); ",
									"requestBody.startDate = pastDate.toISOString();",
									"",
									"let futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 100));",
									"requestBody.endDate = futureDate.toISOString();",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.level).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.status).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.journal).to.exist.and.to.be.an('object');",
									"});",
									"",
									"pm.test(\"Journal startDate is before endDate\", function () {",
									"  const responseData = pm.response.json();",
									"  const startDate = new Date(responseData.journal.startDate);",
									"  const endDate = new Date(responseData.journal.endDate);",
									"  ",
									"  pm.expect(startDate.getTime()).to.be.lessThan(endDate.getTime(), \"Start date should be before end date\");",
									"});",
									"",
									"pm.test(\"Name and description are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.journal.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  pm.expect(responseData.journal.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCurrencyCode}}/{{$randomCurrencyCode}}\",\n    \"description\": \"{{$randomCurrencyName}}\",\n    \"startDate\": \"{{randomDatePast}}\",\n    \"endDate\": \"{{randomDateFuture}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journals",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journals"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Journals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journals",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journals"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Journal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journal/45",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journal",
								"45"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Journal",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"let pastDate = new Date();",
									"pastDate.setDate(pastDate.getDate() - Math.floor(Math.random() * 100));",
									"requestBody.timeExecuted = pastDate.toISOString();",
									"",
									"let futureDate = new Date();",
									"futureDate.setDate(futureDate.getDate() + Math.floor(Math.random() * 100)); ",
									"requestBody.timeClosed = futureDate.toISOString();",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody);",
									"",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"var randomIntBetween2And15 = getRandomInt(2, 15);",
									"var randomIntBetween2And20 = getRandomInt(2, 20);",
									"",
									"pm.environment.set(\"randomDatePast\", pastDate.toISOString());",
									"pm.environment.set(\"randomDateFuture\", futureDate.toISOString());",
									"",
									"pm.environment.set(\"randomIntBetween2And15\", randomIntBetween2And15);",
									"pm.environment.set(\"randomIntBetween2And20\", randomIntBetween2And20);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCurrencyCode}}/{{$randomCurrencyCode}}\",\n    \"description\": \"{{$randomCurrencyName}}\",\n    \"startDate\": \"{{$isoTimestamp}}\",\n    \"endDate\": \"{{$isoTimestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journals/4",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journals",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Journals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/journals/{{randomIntBetween2And15}},{{randomIntBetween2And20}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"journals",
								"{{randomIntBetween2And15}},{{randomIntBetween2And20}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Record",
			"item": [
				{
					"name": "Add Record",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeExecuted\": \"{{start_date}}\",\n    \"market\": \"Forex\",\n    \"stopLoss\": {{$randomPrice}},\n    \"entryPrice\": {{$randomPrice}},\n    \"exitPrice\": {{$randomPrice}},\n    \"journal\": 1,\n    \"quantity\": {{$randomInt}},\n    \"direction\": \"SHORT\",\n    \"baseInstrument\": \"{{$randomCurrencyCode}}\",\n    \"quoteInstrument\": \"{{$randomCurrencyCode}}\",\n    \"takeProfit\": {{$randomPrice}},\n    \"comments\": \"Sacrificed all of my {{$randomBankAccountName}} balance.\",\n    \"strategy\": \"{{$randomBs}}\",\n    \"timeClosed\": \"{{start_date}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/record",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"record"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/records",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"records"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/records/2",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"records",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Record",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timeExecuted\": \"{{$isoTimestamp}}\",\n    \"market\": \"Forex\",\n    \"stopLoss\": {{$randomPrice}},\n    \"entryPrice\": {{$randomPrice}},\n    \"exitPrice\": {{$randomPrice}},\n    \"journal\": 1,\n    \"quantity\": {{$randomPrice}},\n    \"outcome\": \"Loss\",\n    \"direction\": \"Short\",\n    \"baseInstrument\": \"{{$randomCurrencyCode}}\",\n    \"quoteInstrument\": \"{{$randomCurrencyCode}}\",\n    \"takeProfit\": {{$randomPrice}},\n    \"comments\": \"Sacrificed all of my {{$randomBankAccountName}} balance.\",\n    \"strategy\": \"RSI\",\n    \"timeClosed\": \"{{$isoTimestamp}}\",\n    \"createdBy\": \"Postman\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/records/3",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"records",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/records/{{randomIntBetween2And15}},{{randomIntBetween2And20}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"records",
								"{{randomIntBetween2And15}},{{randomIntBetween2And20}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AI",
			"item": [
				{
					"name": "Analyze Transactions #1",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"user123\",\n    \"financialData\": \"Transactions:\\n\\n- 2023-05-01: Bought 100 shares of ABC stock at $50 per share\\n\\n- 2023-05-05: Sold 50 shares of ABC stock at $55 per share\\n\\n- 2023-05-10: Bought 200 shares of XYZ stock at $30 per share\\n\\n- 2023-05-15: Spent $1,000 on online shopping\\n\\n- 2023-05-20: Received a dividend of $500 from ABC stock\\n\\n- 2023-05-25: Bought 100 shares of DEF stock at $40 per share\\n\\n- 2023-05-30: Spent $2,000 on a vacation\\n\\nTrades:\\n\\n- 2023-06-01: Sold 100 shares of XYZ stock at $35 per share\\n\\n- 2023-06-05: Bought 50 shares of GHI stock at $60 per share\\n\\n- 2023-06-10: Sold 75 shares of DEF stock at $45 per share\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/financial/analyze",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"financial",
								"analyze"
							]
						}
					},
					"response": []
				},
				{
					"name": "Analyze Transactions #2",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"user123\",\n    \"financialData\": \"Transactions:\\n\\n- 2023-08-01: Bought 120 shares of XYZ stock at $50 per share\\n\\n- 2023-08-05: Sold 60 shares of XYZ stock at $55 per share\\n\\n- 2023-08-10: Bought 200 shares of ABC stock at $30 per share\\n\\n- 2023-08-15: Spent $1,000 on home improvements\\n\\n- 2023-08-20: Received a dividend of $300 from XYZ stock\\n\\n- 2023-08-25: Bought 100 shares of DEF stock at $45 per share\\n\\n- 2023-08-30: Spent $2,500 on a luxury retreat\\n\\nTrades:\\n\\n- 2023-09-01: Sold 100 shares of ABC stock at $35 per share\\n\\n- 2023-09-05: Bought 50 shares of GHI stock at $65 per share\\n\\n- 2023-09-10: Sold 75 shares of DEF stock at $50 per share\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/financial/analyze",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"financial",
								"analyze"
							]
						}
					},
					"response": []
				},
				{
					"name": "Analyze Transactions #3",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"user123\",\n    \"financialData\": \"Transactions:\\n\\n- 2023-09-01: Bought 70 shares of JKL stock at $45 per share\\n\\n- 2023-09-05: Sold 35 shares of JKL stock at $50 per share\\n\\n- 2023-09-10: Bought 180 shares of MNO stock at $20 per share\\n\\n- 2023-09-15: Spent $750 on sports gear\\n\\n- 2023-09-20: Received a dividend of $250 from JKL stock\\n\\n- 2023-09-25: Bought 110 shares of PQR stock at $40 per share\\n\\n- 2023-09-30: Spent $1,800 on a holiday\\n\\nTrades:\\n\\n- 2023-10-01: Sold 180 shares of MNO stock at $25 per share\\n\\n- 2023-10-05: Bought 40 shares of STU stock at $60 per share\\n\\n- 2023-10-10: Sold 80 shares of PQR stock at $45 per share\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/financial/analyze",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"financial",
								"analyze"
							]
						}
					},
					"response": []
				},
				{
					"name": "Analyze Transactions #4",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"user123\",\n    \"financialData\": \"Transactions:\\n\\n- 2023-10-01: Bought 100 shares of VWX stock at $55 per share\\n\\n- 2023-10-05: Sold 50 shares of VWX stock at $60 per share\\n\\n- 2023-10-10: Bought 220 shares of YZA stock at $35 per share\\n\\n- 2023-10-15: Spent $1,200 on gadgets\\n\\n- 2023-10-20: Received a dividend of $400 from VWX stock\\n\\n- 2023-10-25: Bought 85 shares of BCD stock at $50 per share\\n\\n- 2023-10-30: Spent $2,000 on a cruise\\n\\nTrades:\\n\\n- 2023-11-01: Sold 220 shares of YZA stock at $40 per share\\n\\n- 2023-11-05: Bought 55 shares of EFG stock at $70 per share\\n\\n- 2023-11-10: Sold 60 shares of BCD stock at $55 per share\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/financial/analyze",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"financial",
								"analyze"
							]
						}
					},
					"response": []
				},
				{
					"name": "Analyze Transactions #5",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"user123\",\n    \"financialData\": \"Transactions: - 2023-11-01: Bought 500 shares of XYZ stock at $100 per share\\n- 2023-11-05: Sold 250 shares of XYZ stock at $80 per share\\n- 2023-11-10: Bought 1000 shares of ABC stock at $50 per share\\n- 2023-11-15: Spent $5,000 on a luxury watch\\n- 2023-11-20: Received a dividend of $100 from XYZ stock\\n- 2023-11-25: Bought 800 shares of DEF stock at $30 per share\\n- 2023-11-30: Spent $10,000 on a gambling trip\\nTrades: - 2023-12-01: Sold 1000 shares of ABC stock at $40 per share\\n- 2023-12-05: Bought 600 shares of GHI stock at $80 per share\\n- 2023-12-10: Sold 500 shares of DEF stock at $25 per share\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/financial/analyze",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"financial",
								"analyze"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stock Ticker",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Randomize the provider",
									"const providerArray = pm.globals.get(\"providerList\").split(\",\");",
									"const randomProviderIndex = Math.floor(Math.random() * providerArray.length);",
									"pm.globals.set(\"provider\", providerArray[randomProviderIndex]);",
									"",
									"// Randomize the stock symbol",
									"const stockArray = pm.globals.get(\"stockList\").split(\",\");",
									"const randomIndex = Math.floor(Math.random() * stockArray.length);",
									"pm.globals.set(\"symbol\", stockArray[randomIndex]);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ticker\": \"A\",\n    \"provider\": \"fmp\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/stock/quote/{{symbol}}?provider={{provider}}",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"stock",
								"quote",
								"{{symbol}}"
							],
							"query": [
								{
									"key": "provider",
									"value": "{{provider}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Historical Stock Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomDate(start, end) {",
									"    // Generates a random date between 'start' and 'end'",
									"    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));",
									"}",
									"",
									"// Set the start date to one year ago from today",
									"const startDateOld = new Date();",
									"startDateOld.setFullYear(startDateOld.getFullYear() - 1);",
									"",
									"// Set the end date to today",
									"const endDateOld = new Date();",
									"",
									"// Generate a random start date between one year ago and today",
									"let startDate = randomDate(startDateOld, endDateOld);",
									"",
									"// Format the start date as YYYY-MM-DD",
									"const formattedStartDate = `${startDate.getFullYear()}-${String(startDate.getMonth() + 1).padStart(2, '0')}-${String(startDate.getDate()).padStart(2, '0')}`;",
									"",
									"pm.globals.set(\"start_date\", formattedStartDate);",
									"",
									"// Set the recent end date to 30 days from today",
									"const endDateRecent = new Date();",
									"endDateRecent.setDate(endDateRecent.getDate() + 30);",
									"",
									"let endDate;",
									"",
									"// Generate a random end date that is after the start date and within 30 days from today",
									"do {",
									"    endDate = randomDate(startDate, endDateRecent);",
									"} while (endDate <= startDate);",
									"",
									"// Format the end date as YYYY-MM-DD (Remove time and timezone)",
									"const formattedEndDate = `${endDate.getFullYear()}-${String(endDate.getMonth() + 1).padStart(2, '0')}-${String(endDate.getDate()).padStart(2, '0')}`;",
									"",
									"pm.globals.set(\"end_date\", formattedEndDate);",
									"",
									"// Retrieve the stock list from global variables and pick a random stock symbol",
									"const stockArray = pm.globals.get(\"stockList\").split(\",\");",
									"const randomIndex = Math.floor(Math.random() * stockArray.length);",
									"pm.globals.set(\"symbol\", stockArray[randomIndex]);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"symbol\": \"GOOGL\",\n    \"start_date\": \"2023-01-01T00:00:00Z\",\n    \"end_date\": \"2023-04-01T00:00:00Z\",\n    \"provider\": \"fmp\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}:{{port}}/{{v}}/stock/historical/{{symbol}}?start_date={{start_date}}&end_date={{end_date}}&provider=fmp",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"{{v}}",
								"stock",
								"historical",
								"{{symbol}}"
							],
							"query": [
								{
									"key": "start_date",
									"value": "{{start_date}}"
								},
								{
									"key": "end_date",
									"value": "{{end_date}}"
								},
								{
									"key": "provider",
									"value": "fmp"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}