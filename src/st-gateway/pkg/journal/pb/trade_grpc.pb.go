// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: pkg/journal/pb/trade.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TradeService_CreateTrade_FullMethodName   = "/journal.TradeService/CreateTrade"
	TradeService_UpdateTrade_FullMethodName   = "/journal.TradeService/UpdateTrade"
	TradeService_FindOneTrade_FullMethodName  = "/journal.TradeService/FindOneTrade"
	TradeService_FindAllTrades_FullMethodName = "/journal.TradeService/FindAllTrades"
	TradeService_DeleteTrade_FullMethodName   = "/journal.TradeService/DeleteTrade"
)

// TradeServiceClient is the client API for TradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeServiceClient interface {
	CreateTrade(ctx context.Context, in *CreateTradeRequest, opts ...grpc.CallOption) (*CreateTradeResponse, error)
	UpdateTrade(ctx context.Context, in *UpdateTradeRequest, opts ...grpc.CallOption) (*UpdateTradeResponse, error)
	FindOneTrade(ctx context.Context, in *FindOneTradeRequest, opts ...grpc.CallOption) (*FindOneTradeResponse, error)
	FindAllTrades(ctx context.Context, in *FindAllTradesRequest, opts ...grpc.CallOption) (*FindAllTradesResponse, error)
	DeleteTrade(ctx context.Context, in *DeleteTradeRequest, opts ...grpc.CallOption) (*DeleteTradeResponse, error)
}

type tradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeServiceClient(cc grpc.ClientConnInterface) TradeServiceClient {
	return &tradeServiceClient{cc}
}

func (c *tradeServiceClient) CreateTrade(ctx context.Context, in *CreateTradeRequest, opts ...grpc.CallOption) (*CreateTradeResponse, error) {
	out := new(CreateTradeResponse)
	err := c.cc.Invoke(ctx, TradeService_CreateTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) UpdateTrade(ctx context.Context, in *UpdateTradeRequest, opts ...grpc.CallOption) (*UpdateTradeResponse, error) {
	out := new(UpdateTradeResponse)
	err := c.cc.Invoke(ctx, TradeService_UpdateTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) FindOneTrade(ctx context.Context, in *FindOneTradeRequest, opts ...grpc.CallOption) (*FindOneTradeResponse, error) {
	out := new(FindOneTradeResponse)
	err := c.cc.Invoke(ctx, TradeService_FindOneTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) FindAllTrades(ctx context.Context, in *FindAllTradesRequest, opts ...grpc.CallOption) (*FindAllTradesResponse, error) {
	out := new(FindAllTradesResponse)
	err := c.cc.Invoke(ctx, TradeService_FindAllTrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeServiceClient) DeleteTrade(ctx context.Context, in *DeleteTradeRequest, opts ...grpc.CallOption) (*DeleteTradeResponse, error) {
	out := new(DeleteTradeResponse)
	err := c.cc.Invoke(ctx, TradeService_DeleteTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeServiceServer is the server API for TradeService service.
// All implementations must embed UnimplementedTradeServiceServer
// for forward compatibility
type TradeServiceServer interface {
	CreateTrade(context.Context, *CreateTradeRequest) (*CreateTradeResponse, error)
	UpdateTrade(context.Context, *UpdateTradeRequest) (*UpdateTradeResponse, error)
	FindOneTrade(context.Context, *FindOneTradeRequest) (*FindOneTradeResponse, error)
	FindAllTrades(context.Context, *FindAllTradesRequest) (*FindAllTradesResponse, error)
	DeleteTrade(context.Context, *DeleteTradeRequest) (*DeleteTradeResponse, error)
	mustEmbedUnimplementedTradeServiceServer()
}

// UnimplementedTradeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradeServiceServer struct {
}

func (UnimplementedTradeServiceServer) CreateTrade(context.Context, *CreateTradeRequest) (*CreateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrade not implemented")
}
func (UnimplementedTradeServiceServer) UpdateTrade(context.Context, *UpdateTradeRequest) (*UpdateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrade not implemented")
}
func (UnimplementedTradeServiceServer) FindOneTrade(context.Context, *FindOneTradeRequest) (*FindOneTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneTrade not implemented")
}
func (UnimplementedTradeServiceServer) FindAllTrades(context.Context, *FindAllTradesRequest) (*FindAllTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTrades not implemented")
}
func (UnimplementedTradeServiceServer) DeleteTrade(context.Context, *DeleteTradeRequest) (*DeleteTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrade not implemented")
}
func (UnimplementedTradeServiceServer) mustEmbedUnimplementedTradeServiceServer() {}

// UnsafeTradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServiceServer will
// result in compilation errors.
type UnsafeTradeServiceServer interface {
	mustEmbedUnimplementedTradeServiceServer()
}

func RegisterTradeServiceServer(s grpc.ServiceRegistrar, srv TradeServiceServer) {
	s.RegisterService(&TradeService_ServiceDesc, srv)
}

func _TradeService_CreateTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).CreateTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeService_CreateTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).CreateTrade(ctx, req.(*CreateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_UpdateTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).UpdateTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeService_UpdateTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).UpdateTrade(ctx, req.(*UpdateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_FindOneTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).FindOneTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeService_FindOneTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).FindOneTrade(ctx, req.(*FindOneTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_FindAllTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).FindAllTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeService_FindAllTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).FindAllTrades(ctx, req.(*FindAllTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradeService_DeleteTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServiceServer).DeleteTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeService_DeleteTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServiceServer).DeleteTrade(ctx, req.(*DeleteTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeService_ServiceDesc is the grpc.ServiceDesc for TradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "journal.TradeService",
	HandlerType: (*TradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrade",
			Handler:    _TradeService_CreateTrade_Handler,
		},
		{
			MethodName: "UpdateTrade",
			Handler:    _TradeService_UpdateTrade_Handler,
		},
		{
			MethodName: "FindOneTrade",
			Handler:    _TradeService_FindOneTrade_Handler,
		},
		{
			MethodName: "FindAllTrades",
			Handler:    _TradeService_FindAllTrades_Handler,
		},
		{
			MethodName: "DeleteTrade",
			Handler:    _TradeService_DeleteTrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/journal/pb/trade.proto",
}
