// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: pkg/journal/pb/journal.proto

package pb

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockJournalServiceClient is a mock of JournalServiceClient interface.
type MockJournalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockJournalServiceClientMockRecorder
}

// MockJournalServiceClientMockRecorder is the mock recorder for MockJournalServiceClient.
type MockJournalServiceClientMockRecorder struct {
	mock *MockJournalServiceClient
}

// NewMockJournalServiceClient creates a new mock instance.
func NewMockJournalServiceClient(ctrl *gomock.Controller) *MockJournalServiceClient {
	mock := &MockJournalServiceClient{ctrl: ctrl}
	mock.recorder = &MockJournalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJournalServiceClient) EXPECT() *MockJournalServiceClientMockRecorder {
	return m.recorder
}

// CreateJournal mocks base method.
func (m *MockJournalServiceClient) CreateJournal(ctx context.Context, in *CreateJournalRequest, opts ...grpc.CallOption) (*CreateJournalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJournal", varargs...)
	ret0, _ := ret[0].(*CreateJournalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJournal indicates an expected call of CreateJournal.
func (mr *MockJournalServiceClientMockRecorder) CreateJournal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJournal", reflect.TypeOf((*MockJournalServiceClient)(nil).CreateJournal), varargs...)
}

// CreateTrade mocks base method.
func (m *MockJournalServiceClient) CreateTrade(ctx context.Context, in *CreateTradeRequest, opts ...grpc.CallOption) (*CreateTradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrade", varargs...)
	ret0, _ := ret[0].(*CreateTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrade indicates an expected call of CreateTrade.
func (mr *MockJournalServiceClientMockRecorder) CreateTrade(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrade", reflect.TypeOf((*MockJournalServiceClient)(nil).CreateTrade), varargs...)
}

// DeleteJournal mocks base method.
func (m *MockJournalServiceClient) DeleteJournal(ctx context.Context, in *DeleteJournalRequest, opts ...grpc.CallOption) (*DeleteJournalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJournal", varargs...)
	ret0, _ := ret[0].(*DeleteJournalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJournal indicates an expected call of DeleteJournal.
func (mr *MockJournalServiceClientMockRecorder) DeleteJournal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJournal", reflect.TypeOf((*MockJournalServiceClient)(nil).DeleteJournal), varargs...)
}

// DeleteTrade mocks base method.
func (m *MockJournalServiceClient) DeleteTrade(ctx context.Context, in *DeleteTradeRequest, opts ...grpc.CallOption) (*DeleteTradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrade", varargs...)
	ret0, _ := ret[0].(*DeleteTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrade indicates an expected call of DeleteTrade.
func (mr *MockJournalServiceClientMockRecorder) DeleteTrade(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrade", reflect.TypeOf((*MockJournalServiceClient)(nil).DeleteTrade), varargs...)
}

// EditJournal mocks base method.
func (m *MockJournalServiceClient) EditJournal(ctx context.Context, in *EditJournalRequest, opts ...grpc.CallOption) (*EditJournalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditJournal", varargs...)
	ret0, _ := ret[0].(*EditJournalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditJournal indicates an expected call of EditJournal.
func (mr *MockJournalServiceClientMockRecorder) EditJournal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditJournal", reflect.TypeOf((*MockJournalServiceClient)(nil).EditJournal), varargs...)
}

// EditTrade mocks base method.
func (m *MockJournalServiceClient) EditTrade(ctx context.Context, in *EditTradeRequest, opts ...grpc.CallOption) (*EditTradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditTrade", varargs...)
	ret0, _ := ret[0].(*EditTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTrade indicates an expected call of EditTrade.
func (mr *MockJournalServiceClientMockRecorder) EditTrade(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTrade", reflect.TypeOf((*MockJournalServiceClient)(nil).EditTrade), varargs...)
}

// FindAllJournals mocks base method.
func (m *MockJournalServiceClient) FindAllJournals(ctx context.Context, in *FindAllJournalsRequest, opts ...grpc.CallOption) (*FindAllJournalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllJournals", varargs...)
	ret0, _ := ret[0].(*FindAllJournalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllJournals indicates an expected call of FindAllJournals.
func (mr *MockJournalServiceClientMockRecorder) FindAllJournals(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllJournals", reflect.TypeOf((*MockJournalServiceClient)(nil).FindAllJournals), varargs...)
}

// FindAllTrades mocks base method.
func (m *MockJournalServiceClient) FindAllTrades(ctx context.Context, in *FindAllTradesRequest, opts ...grpc.CallOption) (*FindAllTradesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllTrades", varargs...)
	ret0, _ := ret[0].(*FindAllTradesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTrades indicates an expected call of FindAllTrades.
func (mr *MockJournalServiceClientMockRecorder) FindAllTrades(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTrades", reflect.TypeOf((*MockJournalServiceClient)(nil).FindAllTrades), varargs...)
}

// FindOneJournal mocks base method.
func (m *MockJournalServiceClient) FindOneJournal(ctx context.Context, in *FindOneJournalRequest, opts ...grpc.CallOption) (*FindOneJournalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneJournal", varargs...)
	ret0, _ := ret[0].(*FindOneJournalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneJournal indicates an expected call of FindOneJournal.
func (mr *MockJournalServiceClientMockRecorder) FindOneJournal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneJournal", reflect.TypeOf((*MockJournalServiceClient)(nil).FindOneJournal), varargs...)
}

// FindOneTrade mocks base method.
func (m *MockJournalServiceClient) FindOneTrade(ctx context.Context, in *FindOneTradeRequest, opts ...grpc.CallOption) (*FindOneTradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneTrade", varargs...)
	ret0, _ := ret[0].(*FindOneTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneTrade indicates an expected call of FindOneTrade.
func (mr *MockJournalServiceClientMockRecorder) FindOneTrade(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneTrade", reflect.TypeOf((*MockJournalServiceClient)(nil).FindOneTrade), varargs...)
}

// MockJournalServiceServer is a mock of JournalServiceServer interface.
type MockJournalServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockJournalServiceServerMockRecorder
}

// MockJournalServiceServerMockRecorder is the mock recorder for MockJournalServiceServer.
type MockJournalServiceServerMockRecorder struct {
	mock *MockJournalServiceServer
}

// NewMockJournalServiceServer creates a new mock instance.
func NewMockJournalServiceServer(ctrl *gomock.Controller) *MockJournalServiceServer {
	mock := &MockJournalServiceServer{ctrl: ctrl}
	mock.recorder = &MockJournalServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJournalServiceServer) EXPECT() *MockJournalServiceServerMockRecorder {
	return m.recorder
}

// CreateJournal mocks base method.
func (m *MockJournalServiceServer) CreateJournal(ctx context.Context, in *CreateJournalRequest) (*CreateJournalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJournal", ctx, in)
	ret0, _ := ret[0].(*CreateJournalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJournal indicates an expected call of CreateJournal.
func (mr *MockJournalServiceServerMockRecorder) CreateJournal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJournal", reflect.TypeOf((*MockJournalServiceServer)(nil).CreateJournal), ctx, in)
}

// CreateTrade mocks base method.
func (m *MockJournalServiceServer) CreateTrade(ctx context.Context, in *CreateTradeRequest) (*CreateTradeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrade", ctx, in)
	ret0, _ := ret[0].(*CreateTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrade indicates an expected call of CreateTrade.
func (mr *MockJournalServiceServerMockRecorder) CreateTrade(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrade", reflect.TypeOf((*MockJournalServiceServer)(nil).CreateTrade), ctx, in)
}

// DeleteJournal mocks base method.
func (m *MockJournalServiceServer) DeleteJournal(ctx context.Context, in *DeleteJournalRequest) (*DeleteJournalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJournal", ctx, in)
	ret0, _ := ret[0].(*DeleteJournalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJournal indicates an expected call of DeleteJournal.
func (mr *MockJournalServiceServerMockRecorder) DeleteJournal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJournal", reflect.TypeOf((*MockJournalServiceServer)(nil).DeleteJournal), ctx, in)
}

// DeleteTrade mocks base method.
func (m *MockJournalServiceServer) DeleteTrade(ctx context.Context, in *DeleteTradeRequest) (*DeleteTradeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrade", ctx, in)
	ret0, _ := ret[0].(*DeleteTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrade indicates an expected call of DeleteTrade.
func (mr *MockJournalServiceServerMockRecorder) DeleteTrade(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrade", reflect.TypeOf((*MockJournalServiceServer)(nil).DeleteTrade), ctx, in)
}

// EditJournal mocks base method.
func (m *MockJournalServiceServer) EditJournal(ctx context.Context, in *EditJournalRequest) (*EditJournalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditJournal", ctx, in)
	ret0, _ := ret[0].(*EditJournalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditJournal indicates an expected call of EditJournal.
func (mr *MockJournalServiceServerMockRecorder) EditJournal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditJournal", reflect.TypeOf((*MockJournalServiceServer)(nil).EditJournal), ctx, in)
}

// EditTrade mocks base method.
func (m *MockJournalServiceServer) EditTrade(ctx context.Context, in *EditTradeRequest) (*EditTradeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTrade", ctx, in)
	ret0, _ := ret[0].(*EditTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTrade indicates an expected call of EditTrade.
func (mr *MockJournalServiceServerMockRecorder) EditTrade(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTrade", reflect.TypeOf((*MockJournalServiceServer)(nil).EditTrade), ctx, in)
}

// FindAllJournals mocks base method.
func (m *MockJournalServiceServer) FindAllJournals(ctx context.Context, in *FindAllJournalsRequest) (*FindAllJournalsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllJournals", ctx, in)
	ret0, _ := ret[0].(*FindAllJournalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllJournals indicates an expected call of FindAllJournals.
func (mr *MockJournalServiceServerMockRecorder) FindAllJournals(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllJournals", reflect.TypeOf((*MockJournalServiceServer)(nil).FindAllJournals), ctx, in)
}

// FindAllTrades mocks base method.
func (m *MockJournalServiceServer) FindAllTrades(ctx context.Context, in *FindAllTradesRequest) (*FindAllTradesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTrades", ctx, in)
	ret0, _ := ret[0].(*FindAllTradesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTrades indicates an expected call of FindAllTrades.
func (mr *MockJournalServiceServerMockRecorder) FindAllTrades(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTrades", reflect.TypeOf((*MockJournalServiceServer)(nil).FindAllTrades), ctx, in)
}

// FindOneJournal mocks base method.
func (m *MockJournalServiceServer) FindOneJournal(ctx context.Context, in *FindOneJournalRequest) (*FindOneJournalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneJournal", ctx, in)
	ret0, _ := ret[0].(*FindOneJournalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneJournal indicates an expected call of FindOneJournal.
func (mr *MockJournalServiceServerMockRecorder) FindOneJournal(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneJournal", reflect.TypeOf((*MockJournalServiceServer)(nil).FindOneJournal), ctx, in)
}

// FindOneTrade mocks base method.
func (m *MockJournalServiceServer) FindOneTrade(ctx context.Context, in *FindOneTradeRequest) (*FindOneTradeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneTrade", ctx, in)
	ret0, _ := ret[0].(*FindOneTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneTrade indicates an expected call of FindOneTrade.
func (mr *MockJournalServiceServerMockRecorder) FindOneTrade(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneTrade", reflect.TypeOf((*MockJournalServiceServer)(nil).FindOneTrade), ctx, in)
}
