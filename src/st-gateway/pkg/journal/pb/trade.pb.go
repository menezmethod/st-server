// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.9
// source: pkg/journal/pb/trade.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Requests
type CreateTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeExecuted    string                 `protobuf:"bytes,1,opt,name=timeExecuted,proto3" json:"timeExecuted,omitempty"`
	Market          string                 `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	StopLoss        float32                `protobuf:"fixed32,3,opt,name=stopLoss,proto3" json:"stopLoss,omitempty"`
	EntryPrice      float32                `protobuf:"fixed32,4,opt,name=entryPrice,proto3" json:"entryPrice,omitempty"`
	ExitPrice       float32                `protobuf:"fixed32,5,opt,name=exitPrice,proto3" json:"exitPrice,omitempty"`
	Journal         uint64                 `protobuf:"varint,6,opt,name=journal,proto3" json:"journal,omitempty"`
	Quantity        float32                `protobuf:"fixed32,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Outcome         string                 `protobuf:"bytes,8,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Direction       string                 `protobuf:"bytes,9,opt,name=direction,proto3" json:"direction,omitempty"`
	BaseInstrument  string                 `protobuf:"bytes,10,opt,name=baseInstrument,proto3" json:"baseInstrument,omitempty"`
	QuoteInstrument string                 `protobuf:"bytes,11,opt,name=quoteInstrument,proto3" json:"quoteInstrument,omitempty"`
	TakeProfit      float32                `protobuf:"fixed32,12,opt,name=takeProfit,proto3" json:"takeProfit,omitempty"`
	Comments        string                 `protobuf:"bytes,13,opt,name=comments,proto3" json:"comments,omitempty"`
	Strategy        string                 `protobuf:"bytes,14,opt,name=strategy,proto3" json:"strategy,omitempty"`
	TimeClosed      string                 `protobuf:"bytes,15,opt,name=timeClosed,proto3" json:"timeClosed,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,17,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
}

func (x *CreateTradeRequest) Reset() {
	*x = CreateTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeRequest) ProtoMessage() {}

func (x *CreateTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeRequest.ProtoReflect.Descriptor instead.
func (*CreateTradeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTradeRequest) GetTimeExecuted() string {
	if x != nil {
		return x.TimeExecuted
	}
	return ""
}

func (x *CreateTradeRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *CreateTradeRequest) GetStopLoss() float32 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *CreateTradeRequest) GetEntryPrice() float32 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *CreateTradeRequest) GetExitPrice() float32 {
	if x != nil {
		return x.ExitPrice
	}
	return 0
}

func (x *CreateTradeRequest) GetJournal() uint64 {
	if x != nil {
		return x.Journal
	}
	return 0
}

func (x *CreateTradeRequest) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateTradeRequest) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *CreateTradeRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *CreateTradeRequest) GetBaseInstrument() string {
	if x != nil {
		return x.BaseInstrument
	}
	return ""
}

func (x *CreateTradeRequest) GetQuoteInstrument() string {
	if x != nil {
		return x.QuoteInstrument
	}
	return ""
}

func (x *CreateTradeRequest) GetTakeProfit() float32 {
	if x != nil {
		return x.TakeProfit
	}
	return 0
}

func (x *CreateTradeRequest) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *CreateTradeRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *CreateTradeRequest) GetTimeClosed() string {
	if x != nil {
		return x.TimeClosed
	}
	return ""
}

func (x *CreateTradeRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateTradeRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type UpdateTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeExecuted    string                 `protobuf:"bytes,2,opt,name=timeExecuted,proto3" json:"timeExecuted,omitempty"`
	Market          string                 `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	StopLoss        float32                `protobuf:"fixed32,4,opt,name=stopLoss,proto3" json:"stopLoss,omitempty"`
	EntryPrice      float32                `protobuf:"fixed32,5,opt,name=entryPrice,proto3" json:"entryPrice,omitempty"`
	ExitPrice       float32                `protobuf:"fixed32,6,opt,name=exitPrice,proto3" json:"exitPrice,omitempty"`
	Journal         uint64                 `protobuf:"varint,7,opt,name=journal,proto3" json:"journal,omitempty"`
	Quantity        float32                `protobuf:"fixed32,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Outcome         string                 `protobuf:"bytes,9,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Direction       string                 `protobuf:"bytes,10,opt,name=direction,proto3" json:"direction,omitempty"`
	BaseInstrument  string                 `protobuf:"bytes,11,opt,name=baseInstrument,proto3" json:"baseInstrument,omitempty"`
	QuoteInstrument string                 `protobuf:"bytes,12,opt,name=quoteInstrument,proto3" json:"quoteInstrument,omitempty"`
	TakeProfit      float32                `protobuf:"fixed32,13,opt,name=takeProfit,proto3" json:"takeProfit,omitempty"`
	Comments        string                 `protobuf:"bytes,14,opt,name=comments,proto3" json:"comments,omitempty"`
	Strategy        string                 `protobuf:"bytes,15,opt,name=strategy,proto3" json:"strategy,omitempty"`
	TimeClosed      string                 `protobuf:"bytes,16,opt,name=timeClosed,proto3" json:"timeClosed,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,18,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
}

func (x *UpdateTradeRequest) Reset() {
	*x = UpdateTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTradeRequest) ProtoMessage() {}

func (x *UpdateTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTradeRequest.ProtoReflect.Descriptor instead.
func (*UpdateTradeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateTradeRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTradeRequest) GetTimeExecuted() string {
	if x != nil {
		return x.TimeExecuted
	}
	return ""
}

func (x *UpdateTradeRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *UpdateTradeRequest) GetStopLoss() float32 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *UpdateTradeRequest) GetEntryPrice() float32 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *UpdateTradeRequest) GetExitPrice() float32 {
	if x != nil {
		return x.ExitPrice
	}
	return 0
}

func (x *UpdateTradeRequest) GetJournal() uint64 {
	if x != nil {
		return x.Journal
	}
	return 0
}

func (x *UpdateTradeRequest) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *UpdateTradeRequest) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *UpdateTradeRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *UpdateTradeRequest) GetBaseInstrument() string {
	if x != nil {
		return x.BaseInstrument
	}
	return ""
}

func (x *UpdateTradeRequest) GetQuoteInstrument() string {
	if x != nil {
		return x.QuoteInstrument
	}
	return ""
}

func (x *UpdateTradeRequest) GetTakeProfit() float32 {
	if x != nil {
		return x.TakeProfit
	}
	return 0
}

func (x *UpdateTradeRequest) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *UpdateTradeRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *UpdateTradeRequest) GetTimeClosed() string {
	if x != nil {
		return x.TimeClosed
	}
	return ""
}

func (x *UpdateTradeRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UpdateTradeRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type FindOneTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindOneTradeRequest) Reset() {
	*x = FindOneTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOneTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneTradeRequest) ProtoMessage() {}

func (x *FindOneTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneTradeRequest.ProtoReflect.Descriptor instead.
func (*FindOneTradeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{2}
}

func (x *FindOneTradeRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindAllTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllTradesRequest) Reset() {
	*x = FindAllTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllTradesRequest) ProtoMessage() {}

func (x *FindAllTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllTradesRequest.ProtoReflect.Descriptor instead.
func (*FindAllTradesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{3}
}

type DeleteTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTradeRequest) Reset() {
	*x = DeleteTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTradeRequest) ProtoMessage() {}

func (x *DeleteTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTradeRequest.ProtoReflect.Descriptor instead.
func (*DeleteTradeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteTradeRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

// Responses
type CreateTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Level     string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Status    uint64 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Data      *Trade `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Error     string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateTradeResponse) Reset() {
	*x = CreateTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeResponse) ProtoMessage() {}

func (x *CreateTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeResponse.ProtoReflect.Descriptor instead.
func (*CreateTradeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTradeResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *CreateTradeResponse) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *CreateTradeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTradeResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateTradeResponse) GetData() *Trade {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UpdateTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Level     string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Status    uint64 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Data      *Trade `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Error     string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateTradeResponse) Reset() {
	*x = UpdateTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTradeResponse) ProtoMessage() {}

func (x *UpdateTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTradeResponse.ProtoReflect.Descriptor instead.
func (*UpdateTradeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTradeResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *UpdateTradeResponse) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *UpdateTradeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateTradeResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateTradeResponse) GetData() *Trade {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindOneTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data   *Trade `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FindOneTradeResponse) Reset() {
	*x = FindOneTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOneTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneTradeResponse) ProtoMessage() {}

func (x *FindOneTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneTradeResponse.ProtoReflect.Descriptor instead.
func (*FindOneTradeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{7}
}

func (x *FindOneTradeResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindOneTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FindOneTradeResponse) GetData() *Trade {
	if x != nil {
		return x.Data
	}
	return nil
}

type FindAllTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data   []*Trade `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FindAllTradesResponse) Reset() {
	*x = FindAllTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllTradesResponse) ProtoMessage() {}

func (x *FindAllTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllTradesResponse.ProtoReflect.Descriptor instead.
func (*FindAllTradesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{8}
}

func (x *FindAllTradesResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindAllTradesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FindAllTradesResponse) GetData() []*Trade {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       uint64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message      string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Level        string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Error        string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	RowsAffected uint64 `protobuf:"varint,5,opt,name=rowsAffected,proto3" json:"rowsAffected,omitempty"`
}

func (x *DeleteTradeResponse) Reset() {
	*x = DeleteTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTradeResponse) ProtoMessage() {}

func (x *DeleteTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTradeResponse.ProtoReflect.Descriptor instead.
func (*DeleteTradeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteTradeResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeleteTradeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteTradeResponse) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *DeleteTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DeleteTradeResponse) GetRowsAffected() uint64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

// Model
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeExecuted    string                 `protobuf:"bytes,2,opt,name=timeExecuted,proto3" json:"timeExecuted,omitempty"`
	Market          string                 `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	StopLoss        float32                `protobuf:"fixed32,4,opt,name=stopLoss,proto3" json:"stopLoss,omitempty"`
	EntryPrice      float32                `protobuf:"fixed32,5,opt,name=entryPrice,proto3" json:"entryPrice,omitempty"`
	ExitPrice       float32                `protobuf:"fixed32,6,opt,name=exitPrice,proto3" json:"exitPrice,omitempty"`
	Journal         uint64                 `protobuf:"varint,7,opt,name=journal,proto3" json:"journal,omitempty"`
	Quantity        float32                `protobuf:"fixed32,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Outcome         string                 `protobuf:"bytes,9,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Direction       string                 `protobuf:"bytes,10,opt,name=direction,proto3" json:"direction,omitempty"`
	BaseInstrument  string                 `protobuf:"bytes,11,opt,name=baseInstrument,proto3" json:"baseInstrument,omitempty"`
	QuoteInstrument string                 `protobuf:"bytes,12,opt,name=quoteInstrument,proto3" json:"quoteInstrument,omitempty"`
	TakeProfit      float32                `protobuf:"fixed32,13,opt,name=takeProfit,proto3" json:"takeProfit,omitempty"`
	Comments        string                 `protobuf:"bytes,14,opt,name=comments,proto3" json:"comments,omitempty"`
	Strategy        string                 `protobuf:"bytes,15,opt,name=strategy,proto3" json:"strategy,omitempty"`
	TimeClosed      string                 `protobuf:"bytes,16,opt,name=timeClosed,proto3" json:"timeClosed,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,18,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_trade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_trade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_trade_proto_rawDescGZIP(), []int{10}
}

func (x *Trade) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Trade) GetTimeExecuted() string {
	if x != nil {
		return x.TimeExecuted
	}
	return ""
}

func (x *Trade) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *Trade) GetStopLoss() float32 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *Trade) GetEntryPrice() float32 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *Trade) GetExitPrice() float32 {
	if x != nil {
		return x.ExitPrice
	}
	return 0
}

func (x *Trade) GetJournal() uint64 {
	if x != nil {
		return x.Journal
	}
	return 0
}

func (x *Trade) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *Trade) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Trade) GetBaseInstrument() string {
	if x != nil {
		return x.BaseInstrument
	}
	return ""
}

func (x *Trade) GetQuoteInstrument() string {
	if x != nil {
		return x.QuoteInstrument
	}
	return ""
}

func (x *Trade) GetTakeProfit() float32 {
	if x != nil {
		return x.TakeProfit
	}
	return 0
}

func (x *Trade) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *Trade) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *Trade) GetTimeClosed() string {
	if x != nil {
		return x.TimeClosed
	}
	return ""
}

func (x *Trade) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Trade) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

var File_pkg_journal_pb_trade_proto protoreflect.FileDescriptor

var file_pkg_journal_pb_trade_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62,
	0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x04, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0xca, 0x04, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x22, 0x25, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb5, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x68, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x69, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x22, 0xbd, 0x04, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x32, 0x93, 0x03, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x0c, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x2e,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x2e,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_journal_pb_trade_proto_rawDescOnce sync.Once
	file_pkg_journal_pb_trade_proto_rawDescData = file_pkg_journal_pb_trade_proto_rawDesc
)

func file_pkg_journal_pb_trade_proto_rawDescGZIP() []byte {
	file_pkg_journal_pb_trade_proto_rawDescOnce.Do(func() {
		file_pkg_journal_pb_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_journal_pb_trade_proto_rawDescData)
	})
	return file_pkg_journal_pb_trade_proto_rawDescData
}

var file_pkg_journal_pb_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pkg_journal_pb_trade_proto_goTypes = []interface{}{
	(*CreateTradeRequest)(nil),    // 0: journal.CreateTradeRequest
	(*UpdateTradeRequest)(nil),    // 1: journal.UpdateTradeRequest
	(*FindOneTradeRequest)(nil),   // 2: journal.FindOneTradeRequest
	(*FindAllTradesRequest)(nil),  // 3: journal.FindAllTradesRequest
	(*DeleteTradeRequest)(nil),    // 4: journal.DeleteTradeRequest
	(*CreateTradeResponse)(nil),   // 5: journal.CreateTradeResponse
	(*UpdateTradeResponse)(nil),   // 6: journal.UpdateTradeResponse
	(*FindOneTradeResponse)(nil),  // 7: journal.FindOneTradeResponse
	(*FindAllTradesResponse)(nil), // 8: journal.FindAllTradesResponse
	(*DeleteTradeResponse)(nil),   // 9: journal.DeleteTradeResponse
	(*Trade)(nil),                 // 10: journal.Trade
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_pkg_journal_pb_trade_proto_depIdxs = []int32{
	11, // 0: journal.CreateTradeRequest.createdAt:type_name -> google.protobuf.Timestamp
	11, // 1: journal.UpdateTradeRequest.createdAt:type_name -> google.protobuf.Timestamp
	10, // 2: journal.CreateTradeResponse.data:type_name -> journal.Trade
	10, // 3: journal.UpdateTradeResponse.data:type_name -> journal.Trade
	10, // 4: journal.FindOneTradeResponse.data:type_name -> journal.Trade
	10, // 5: journal.FindAllTradesResponse.data:type_name -> journal.Trade
	11, // 6: journal.Trade.createdAt:type_name -> google.protobuf.Timestamp
	0,  // 7: journal.TradeService.CreateTrade:input_type -> journal.CreateTradeRequest
	1,  // 8: journal.TradeService.UpdateTrade:input_type -> journal.UpdateTradeRequest
	2,  // 9: journal.TradeService.FindOneTrade:input_type -> journal.FindOneTradeRequest
	3,  // 10: journal.TradeService.FindAllTrades:input_type -> journal.FindAllTradesRequest
	4,  // 11: journal.TradeService.DeleteTrade:input_type -> journal.DeleteTradeRequest
	5,  // 12: journal.TradeService.CreateTrade:output_type -> journal.CreateTradeResponse
	6,  // 13: journal.TradeService.UpdateTrade:output_type -> journal.UpdateTradeResponse
	7,  // 14: journal.TradeService.FindOneTrade:output_type -> journal.FindOneTradeResponse
	8,  // 15: journal.TradeService.FindAllTrades:output_type -> journal.FindAllTradesResponse
	9,  // 16: journal.TradeService.DeleteTrade:output_type -> journal.DeleteTradeResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_pkg_journal_pb_trade_proto_init() }
func file_pkg_journal_pb_trade_proto_init() {
	if File_pkg_journal_pb_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_journal_pb_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOneTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOneTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_trade_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_journal_pb_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_journal_pb_trade_proto_goTypes,
		DependencyIndexes: file_pkg_journal_pb_trade_proto_depIdxs,
		MessageInfos:      file_pkg_journal_pb_trade_proto_msgTypes,
	}.Build()
	File_pkg_journal_pb_trade_proto = out.File
	file_pkg_journal_pb_trade_proto_rawDesc = nil
	file_pkg_journal_pb_trade_proto_goTypes = nil
	file_pkg_journal_pb_trade_proto_depIdxs = nil
}
