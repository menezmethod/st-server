// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: pkg/journal/pb/journal.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateJournalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,2,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	StartDate       string                 `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate         string                 `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Name            string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	UsersSubscribed []uint64               `protobuf:"varint,8,rep,packed,name=usersSubscribed,proto3" json:"usersSubscribed,omitempty"`
}

func (x *CreateJournalRequest) Reset() {
	*x = CreateJournalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJournalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJournalRequest) ProtoMessage() {}

func (x *CreateJournalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJournalRequest.ProtoReflect.Descriptor instead.
func (*CreateJournalRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{0}
}

func (x *CreateJournalRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateJournalRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateJournalRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateJournalRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateJournalRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CreateJournalRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateJournalRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateJournalRequest) GetUsersSubscribed() []uint64 {
	if x != nil {
		return x.UsersSubscribed
	}
	return nil
}

type CreateJournalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Id     uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateJournalResponse) Reset() {
	*x = CreateJournalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJournalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJournalResponse) ProtoMessage() {}

func (x *CreateJournalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJournalResponse.ProtoReflect.Descriptor instead.
func (*CreateJournalResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{1}
}

func (x *CreateJournalResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateJournalResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CreateJournalResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EditJournalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedBy       string   `protobuf:"bytes,2,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedAt       string   `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	StartDate       string   `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate         string   `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Name            string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Description     string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	UsersSubscribed []uint64 `protobuf:"varint,8,rep,packed,name=usersSubscribed,proto3" json:"usersSubscribed,omitempty"`
}

func (x *EditJournalData) Reset() {
	*x = EditJournalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditJournalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditJournalData) ProtoMessage() {}

func (x *EditJournalData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditJournalData.ProtoReflect.Descriptor instead.
func (*EditJournalData) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{2}
}

func (x *EditJournalData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditJournalData) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *EditJournalData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *EditJournalData) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *EditJournalData) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *EditJournalData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditJournalData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EditJournalData) GetUsersSubscribed() []uint64 {
	if x != nil {
		return x.UsersSubscribed
	}
	return nil
}

type EditJournalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,2,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	StartDate       string                 `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate         string                 `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Name            string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	UsersSubscribed []uint64               `protobuf:"varint,8,rep,packed,name=usersSubscribed,proto3" json:"usersSubscribed,omitempty"`
}

func (x *EditJournalRequest) Reset() {
	*x = EditJournalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditJournalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditJournalRequest) ProtoMessage() {}

func (x *EditJournalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditJournalRequest.ProtoReflect.Descriptor instead.
func (*EditJournalRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{3}
}

func (x *EditJournalRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditJournalRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *EditJournalRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EditJournalRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *EditJournalRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *EditJournalRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditJournalRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EditJournalRequest) GetUsersSubscribed() []uint64 {
	if x != nil {
		return x.UsersSubscribed
	}
	return nil
}

type EditJournalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64           `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data   *EditJournalData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EditJournalResponse) Reset() {
	*x = EditJournalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditJournalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditJournalResponse) ProtoMessage() {}

func (x *EditJournalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditJournalResponse.ProtoReflect.Descriptor instead.
func (*EditJournalResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{4}
}

func (x *EditJournalResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EditJournalResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EditJournalResponse) GetData() *EditJournalData {
	if x != nil {
		return x.Data
	}
	return nil
}

type Journal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedBy       string   `protobuf:"bytes,2,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedAt       string   `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	StartDate       string   `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate         string   `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Name            string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Description     string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	UsersSubscribed []uint64 `protobuf:"varint,8,rep,packed,name=usersSubscribed,proto3" json:"usersSubscribed,omitempty"`
}

func (x *Journal) Reset() {
	*x = Journal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Journal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Journal) ProtoMessage() {}

func (x *Journal) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Journal.ProtoReflect.Descriptor instead.
func (*Journal) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{5}
}

func (x *Journal) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Journal) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Journal) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Journal) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Journal) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Journal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Journal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Journal) GetUsersSubscribed() []uint64 {
	if x != nil {
		return x.UsersSubscribed
	}
	return nil
}

type FindAllJournalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllJournalsRequest) Reset() {
	*x = FindAllJournalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllJournalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllJournalsRequest) ProtoMessage() {}

func (x *FindAllJournalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllJournalsRequest.ProtoReflect.Descriptor instead.
func (*FindAllJournalsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{6}
}

type FindAllJournalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data   []*Journal `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FindAllJournalsResponse) Reset() {
	*x = FindAllJournalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllJournalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllJournalsResponse) ProtoMessage() {}

func (x *FindAllJournalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllJournalsResponse.ProtoReflect.Descriptor instead.
func (*FindAllJournalsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{7}
}

func (x *FindAllJournalsResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindAllJournalsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FindAllJournalsResponse) GetData() []*Journal {
	if x != nil {
		return x.Data
	}
	return nil
}

type FindOneJournalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindOneJournalRequest) Reset() {
	*x = FindOneJournalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOneJournalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneJournalRequest) ProtoMessage() {}

func (x *FindOneJournalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneJournalRequest.ProtoReflect.Descriptor instead.
func (*FindOneJournalRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{8}
}

func (x *FindOneJournalRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindOneJournalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data   *Journal `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FindOneJournalResponse) Reset() {
	*x = FindOneJournalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOneJournalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneJournalResponse) ProtoMessage() {}

func (x *FindOneJournalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneJournalResponse.ProtoReflect.Descriptor instead.
func (*FindOneJournalResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{9}
}

func (x *FindOneJournalResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindOneJournalResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FindOneJournalResponse) GetData() *Journal {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteJournalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteJournalRequest) Reset() {
	*x = DeleteJournalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJournalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJournalRequest) ProtoMessage() {}

func (x *DeleteJournalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJournalRequest.ProtoReflect.Descriptor instead.
func (*DeleteJournalRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteJournalRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteJournalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeleteJournalResponse) Reset() {
	*x = DeleteJournalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJournalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJournalResponse) ProtoMessage() {}

func (x *DeleteJournalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJournalResponse.ProtoReflect.Descriptor instead.
func (*DeleteJournalResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteJournalResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeleteJournalResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CreateTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeExecuted    string                 `protobuf:"bytes,2,opt,name=timeExecuted,proto3" json:"timeExecuted,omitempty"`
	Market          string                 `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	StopLoss        float32                `protobuf:"fixed32,4,opt,name=stopLoss,proto3" json:"stopLoss,omitempty"`
	EntryPrice      float32                `protobuf:"fixed32,5,opt,name=entryPrice,proto3" json:"entryPrice,omitempty"`
	ExitPrice       float32                `protobuf:"fixed32,6,opt,name=exitPrice,proto3" json:"exitPrice,omitempty"`
	Journal         uint64                 `protobuf:"varint,7,opt,name=journal,proto3" json:"journal,omitempty"`
	Quantity        float32                `protobuf:"fixed32,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Outcome         string                 `protobuf:"bytes,9,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Direction       string                 `protobuf:"bytes,10,opt,name=direction,proto3" json:"direction,omitempty"`
	BaseInstrument  string                 `protobuf:"bytes,11,opt,name=baseInstrument,proto3" json:"baseInstrument,omitempty"`
	QuoteInstrument string                 `protobuf:"bytes,12,opt,name=quoteInstrument,proto3" json:"quoteInstrument,omitempty"`
	TakeProfit      float32                `protobuf:"fixed32,13,opt,name=takeProfit,proto3" json:"takeProfit,omitempty"`
	Comments        string                 `protobuf:"bytes,14,opt,name=comments,proto3" json:"comments,omitempty"`
	Strategy        string                 `protobuf:"bytes,15,opt,name=strategy,proto3" json:"strategy,omitempty"`
	TimeClosed      string                 `protobuf:"bytes,16,opt,name=timeClosed,proto3" json:"timeClosed,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,18,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
}

func (x *CreateTradeRequest) Reset() {
	*x = CreateTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeRequest) ProtoMessage() {}

func (x *CreateTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeRequest.ProtoReflect.Descriptor instead.
func (*CreateTradeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{12}
}

func (x *CreateTradeRequest) GetTimeExecuted() string {
	if x != nil {
		return x.TimeExecuted
	}
	return ""
}

func (x *CreateTradeRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *CreateTradeRequest) GetStopLoss() float32 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *CreateTradeRequest) GetEntryPrice() float32 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *CreateTradeRequest) GetExitPrice() float32 {
	if x != nil {
		return x.ExitPrice
	}
	return 0
}

func (x *CreateTradeRequest) GetJournal() uint64 {
	if x != nil {
		return x.Journal
	}
	return 0
}

func (x *CreateTradeRequest) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateTradeRequest) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *CreateTradeRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *CreateTradeRequest) GetBaseInstrument() string {
	if x != nil {
		return x.BaseInstrument
	}
	return ""
}

func (x *CreateTradeRequest) GetQuoteInstrument() string {
	if x != nil {
		return x.QuoteInstrument
	}
	return ""
}

func (x *CreateTradeRequest) GetTakeProfit() float32 {
	if x != nil {
		return x.TakeProfit
	}
	return 0
}

func (x *CreateTradeRequest) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *CreateTradeRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *CreateTradeRequest) GetTimeClosed() string {
	if x != nil {
		return x.TimeClosed
	}
	return ""
}

func (x *CreateTradeRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateTradeRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type CreateTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data   *Trade `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateTradeResponse) Reset() {
	*x = CreateTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeResponse) ProtoMessage() {}

func (x *CreateTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeResponse.ProtoReflect.Descriptor instead.
func (*CreateTradeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{13}
}

func (x *CreateTradeResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CreateTradeResponse) GetData() *Trade {
	if x != nil {
		return x.Data
	}
	return nil
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeExecuted    string  `protobuf:"bytes,2,opt,name=timeExecuted,proto3" json:"timeExecuted,omitempty"`
	Market          string  `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	StopLoss        float32 `protobuf:"fixed32,4,opt,name=stopLoss,proto3" json:"stopLoss,omitempty"`
	EntryPrice      float32 `protobuf:"fixed32,5,opt,name=entryPrice,proto3" json:"entryPrice,omitempty"`
	ExitPrice       float32 `protobuf:"fixed32,6,opt,name=exitPrice,proto3" json:"exitPrice,omitempty"`
	Journal         uint64  `protobuf:"varint,7,opt,name=journal,proto3" json:"journal,omitempty"`
	Quantity        float32 `protobuf:"fixed32,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Outcome         string  `protobuf:"bytes,9,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Direction       string  `protobuf:"bytes,10,opt,name=direction,proto3" json:"direction,omitempty"`
	BaseInstrument  string  `protobuf:"bytes,11,opt,name=baseInstrument,proto3" json:"baseInstrument,omitempty"`
	QuoteInstrument string  `protobuf:"bytes,12,opt,name=quoteInstrument,proto3" json:"quoteInstrument,omitempty"`
	TakeProfit      float32 `protobuf:"fixed32,13,opt,name=takeProfit,proto3" json:"takeProfit,omitempty"`
	Comments        string  `protobuf:"bytes,14,opt,name=comments,proto3" json:"comments,omitempty"`
	Strategy        string  `protobuf:"bytes,15,opt,name=strategy,proto3" json:"strategy,omitempty"`
	TimeClosed      string  `protobuf:"bytes,16,opt,name=timeClosed,proto3" json:"timeClosed,omitempty"`
	CreatedAt       string  `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedBy       string  `protobuf:"bytes,18,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{14}
}

func (x *Trade) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Trade) GetTimeExecuted() string {
	if x != nil {
		return x.TimeExecuted
	}
	return ""
}

func (x *Trade) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *Trade) GetStopLoss() float32 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *Trade) GetEntryPrice() float32 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *Trade) GetExitPrice() float32 {
	if x != nil {
		return x.ExitPrice
	}
	return 0
}

func (x *Trade) GetJournal() uint64 {
	if x != nil {
		return x.Journal
	}
	return 0
}

func (x *Trade) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *Trade) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Trade) GetBaseInstrument() string {
	if x != nil {
		return x.BaseInstrument
	}
	return ""
}

func (x *Trade) GetQuoteInstrument() string {
	if x != nil {
		return x.QuoteInstrument
	}
	return ""
}

func (x *Trade) GetTakeProfit() float32 {
	if x != nil {
		return x.TakeProfit
	}
	return 0
}

func (x *Trade) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *Trade) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *Trade) GetTimeClosed() string {
	if x != nil {
		return x.TimeClosed
	}
	return ""
}

func (x *Trade) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Trade) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type EditTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeExecuted    string                 `protobuf:"bytes,2,opt,name=timeExecuted,proto3" json:"timeExecuted,omitempty"`
	Market          string                 `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	StopLoss        float32                `protobuf:"fixed32,4,opt,name=stopLoss,proto3" json:"stopLoss,omitempty"`
	EntryPrice      float32                `protobuf:"fixed32,5,opt,name=entryPrice,proto3" json:"entryPrice,omitempty"`
	ExitPrice       float32                `protobuf:"fixed32,6,opt,name=exitPrice,proto3" json:"exitPrice,omitempty"`
	Journal         uint64                 `protobuf:"varint,7,opt,name=journal,proto3" json:"journal,omitempty"`
	Quantity        float32                `protobuf:"fixed32,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Outcome         string                 `protobuf:"bytes,9,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Direction       string                 `protobuf:"bytes,10,opt,name=direction,proto3" json:"direction,omitempty"`
	BaseInstrument  string                 `protobuf:"bytes,11,opt,name=baseInstrument,proto3" json:"baseInstrument,omitempty"`
	QuoteInstrument string                 `protobuf:"bytes,12,opt,name=quoteInstrument,proto3" json:"quoteInstrument,omitempty"`
	TakeProfit      float32                `protobuf:"fixed32,13,opt,name=takeProfit,proto3" json:"takeProfit,omitempty"`
	Comments        string                 `protobuf:"bytes,14,opt,name=comments,proto3" json:"comments,omitempty"`
	Strategy        string                 `protobuf:"bytes,15,opt,name=strategy,proto3" json:"strategy,omitempty"`
	TimeClosed      string                 `protobuf:"bytes,16,opt,name=timeClosed,proto3" json:"timeClosed,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedBy       string                 `protobuf:"bytes,18,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
}

func (x *EditTradeRequest) Reset() {
	*x = EditTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditTradeRequest) ProtoMessage() {}

func (x *EditTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditTradeRequest.ProtoReflect.Descriptor instead.
func (*EditTradeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{15}
}

func (x *EditTradeRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditTradeRequest) GetTimeExecuted() string {
	if x != nil {
		return x.TimeExecuted
	}
	return ""
}

func (x *EditTradeRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *EditTradeRequest) GetStopLoss() float32 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *EditTradeRequest) GetEntryPrice() float32 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *EditTradeRequest) GetExitPrice() float32 {
	if x != nil {
		return x.ExitPrice
	}
	return 0
}

func (x *EditTradeRequest) GetJournal() uint64 {
	if x != nil {
		return x.Journal
	}
	return 0
}

func (x *EditTradeRequest) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *EditTradeRequest) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *EditTradeRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *EditTradeRequest) GetBaseInstrument() string {
	if x != nil {
		return x.BaseInstrument
	}
	return ""
}

func (x *EditTradeRequest) GetQuoteInstrument() string {
	if x != nil {
		return x.QuoteInstrument
	}
	return ""
}

func (x *EditTradeRequest) GetTakeProfit() float32 {
	if x != nil {
		return x.TakeProfit
	}
	return 0
}

func (x *EditTradeRequest) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *EditTradeRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *EditTradeRequest) GetTimeClosed() string {
	if x != nil {
		return x.TimeClosed
	}
	return ""
}

func (x *EditTradeRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EditTradeRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type EditTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data   *Trade `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EditTradeResponse) Reset() {
	*x = EditTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditTradeResponse) ProtoMessage() {}

func (x *EditTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditTradeResponse.ProtoReflect.Descriptor instead.
func (*EditTradeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{16}
}

func (x *EditTradeResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EditTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EditTradeResponse) GetData() *Trade {
	if x != nil {
		return x.Data
	}
	return nil
}

type FindAllTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllTradesRequest) Reset() {
	*x = FindAllTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllTradesRequest) ProtoMessage() {}

func (x *FindAllTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllTradesRequest.ProtoReflect.Descriptor instead.
func (*FindAllTradesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{17}
}

type FindAllTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data   []*Trade `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FindAllTradesResponse) Reset() {
	*x = FindAllTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllTradesResponse) ProtoMessage() {}

func (x *FindAllTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllTradesResponse.ProtoReflect.Descriptor instead.
func (*FindAllTradesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{18}
}

func (x *FindAllTradesResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindAllTradesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FindAllTradesResponse) GetData() []*Trade {
	if x != nil {
		return x.Data
	}
	return nil
}

type FindOneTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindOneTradeRequest) Reset() {
	*x = FindOneTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOneTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneTradeRequest) ProtoMessage() {}

func (x *FindOneTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneTradeRequest.ProtoReflect.Descriptor instead.
func (*FindOneTradeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{19}
}

func (x *FindOneTradeRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindOneTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data   *Trade `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FindOneTradeResponse) Reset() {
	*x = FindOneTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindOneTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindOneTradeResponse) ProtoMessage() {}

func (x *FindOneTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindOneTradeResponse.ProtoReflect.Descriptor instead.
func (*FindOneTradeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{20}
}

func (x *FindOneTradeResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindOneTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FindOneTradeResponse) GetData() *Trade {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTradeRequest) Reset() {
	*x = DeleteTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTradeRequest) ProtoMessage() {}

func (x *DeleteTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTradeRequest.ProtoReflect.Descriptor instead.
func (*DeleteTradeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteTradeRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status uint64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeleteTradeResponse) Reset() {
	*x = DeleteTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_journal_pb_journal_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTradeResponse) ProtoMessage() {}

func (x *DeleteTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_journal_pb_journal_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTradeResponse.ProtoReflect.Descriptor instead.
func (*DeleteTradeResponse) Descriptor() ([]byte, []int) {
	return file_pkg_journal_pb_journal_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteTradeResponse) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeleteTradeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_pkg_journal_pb_journal_proto protoreflect.FileDescriptor

var file_pkg_journal_pb_journal_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62,
	0x2f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x22, 0x55, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x0f, 0x45, 0x64, 0x69,
	0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x22, 0x94, 0x02, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x71, 0x0a, 0x13, 0x45, 0x64, 0x69, 0x74, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xed, 0x01, 0x0a, 0x07, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x16,
	0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x45, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xba, 0x04, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x78, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x67, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xa1, 0x04, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0xc8, 0x04, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x65,
	0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a,
	0x15, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x68, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x43, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x32, 0xac, 0x06, 0x0a, 0x0e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x2e, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x45,
	0x64, 0x69, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x1e, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x19, 0x2e,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_journal_pb_journal_proto_rawDescOnce sync.Once
	file_pkg_journal_pb_journal_proto_rawDescData = file_pkg_journal_pb_journal_proto_rawDesc
)

func file_pkg_journal_pb_journal_proto_rawDescGZIP() []byte {
	file_pkg_journal_pb_journal_proto_rawDescOnce.Do(func() {
		file_pkg_journal_pb_journal_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_journal_pb_journal_proto_rawDescData)
	})
	return file_pkg_journal_pb_journal_proto_rawDescData
}

var file_pkg_journal_pb_journal_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_pkg_journal_pb_journal_proto_goTypes = []interface{}{
	(*CreateJournalRequest)(nil),    // 0: journal.CreateJournalRequest
	(*CreateJournalResponse)(nil),   // 1: journal.CreateJournalResponse
	(*EditJournalData)(nil),         // 2: journal.EditJournalData
	(*EditJournalRequest)(nil),      // 3: journal.EditJournalRequest
	(*EditJournalResponse)(nil),     // 4: journal.EditJournalResponse
	(*Journal)(nil),                 // 5: journal.Journal
	(*FindAllJournalsRequest)(nil),  // 6: journal.FindAllJournalsRequest
	(*FindAllJournalsResponse)(nil), // 7: journal.FindAllJournalsResponse
	(*FindOneJournalRequest)(nil),   // 8: journal.FindOneJournalRequest
	(*FindOneJournalResponse)(nil),  // 9: journal.FindOneJournalResponse
	(*DeleteJournalRequest)(nil),    // 10: journal.DeleteJournalRequest
	(*DeleteJournalResponse)(nil),   // 11: journal.DeleteJournalResponse
	(*CreateTradeRequest)(nil),      // 12: journal.CreateTradeRequest
	(*CreateTradeResponse)(nil),     // 13: journal.CreateTradeResponse
	(*Trade)(nil),                   // 14: journal.Trade
	(*EditTradeRequest)(nil),        // 15: journal.EditTradeRequest
	(*EditTradeResponse)(nil),       // 16: journal.EditTradeResponse
	(*FindAllTradesRequest)(nil),    // 17: journal.FindAllTradesRequest
	(*FindAllTradesResponse)(nil),   // 18: journal.FindAllTradesResponse
	(*FindOneTradeRequest)(nil),     // 19: journal.FindOneTradeRequest
	(*FindOneTradeResponse)(nil),    // 20: journal.FindOneTradeResponse
	(*DeleteTradeRequest)(nil),      // 21: journal.DeleteTradeRequest
	(*DeleteTradeResponse)(nil),     // 22: journal.DeleteTradeResponse
	(*timestamppb.Timestamp)(nil),   // 23: google.protobuf.Timestamp
}
var file_pkg_journal_pb_journal_proto_depIdxs = []int32{
	23, // 0: journal.CreateJournalRequest.createdAt:type_name -> google.protobuf.Timestamp
	23, // 1: journal.EditJournalRequest.createdAt:type_name -> google.protobuf.Timestamp
	2,  // 2: journal.EditJournalResponse.data:type_name -> journal.EditJournalData
	5,  // 3: journal.FindAllJournalsResponse.data:type_name -> journal.Journal
	5,  // 4: journal.FindOneJournalResponse.data:type_name -> journal.Journal
	23, // 5: journal.CreateTradeRequest.createdAt:type_name -> google.protobuf.Timestamp
	14, // 6: journal.CreateTradeResponse.data:type_name -> journal.Trade
	23, // 7: journal.EditTradeRequest.createdAt:type_name -> google.protobuf.Timestamp
	14, // 8: journal.EditTradeResponse.data:type_name -> journal.Trade
	14, // 9: journal.FindAllTradesResponse.data:type_name -> journal.Trade
	14, // 10: journal.FindOneTradeResponse.data:type_name -> journal.Trade
	0,  // 11: journal.JournalService.CreateJournal:input_type -> journal.CreateJournalRequest
	10, // 12: journal.JournalService.DeleteJournal:input_type -> journal.DeleteJournalRequest
	3,  // 13: journal.JournalService.EditJournal:input_type -> journal.EditJournalRequest
	6,  // 14: journal.JournalService.FindAllJournals:input_type -> journal.FindAllJournalsRequest
	8,  // 15: journal.JournalService.FindOneJournal:input_type -> journal.FindOneJournalRequest
	12, // 16: journal.JournalService.CreateTrade:input_type -> journal.CreateTradeRequest
	15, // 17: journal.JournalService.EditTrade:input_type -> journal.EditTradeRequest
	17, // 18: journal.JournalService.FindAllTrades:input_type -> journal.FindAllTradesRequest
	19, // 19: journal.JournalService.FindOneTrade:input_type -> journal.FindOneTradeRequest
	21, // 20: journal.JournalService.DeleteTrade:input_type -> journal.DeleteTradeRequest
	1,  // 21: journal.JournalService.CreateJournal:output_type -> journal.CreateJournalResponse
	11, // 22: journal.JournalService.DeleteJournal:output_type -> journal.DeleteJournalResponse
	4,  // 23: journal.JournalService.EditJournal:output_type -> journal.EditJournalResponse
	7,  // 24: journal.JournalService.FindAllJournals:output_type -> journal.FindAllJournalsResponse
	9,  // 25: journal.JournalService.FindOneJournal:output_type -> journal.FindOneJournalResponse
	13, // 26: journal.JournalService.CreateTrade:output_type -> journal.CreateTradeResponse
	16, // 27: journal.JournalService.EditTrade:output_type -> journal.EditTradeResponse
	18, // 28: journal.JournalService.FindAllTrades:output_type -> journal.FindAllTradesResponse
	20, // 29: journal.JournalService.FindOneTrade:output_type -> journal.FindOneTradeResponse
	22, // 30: journal.JournalService.DeleteTrade:output_type -> journal.DeleteTradeResponse
	21, // [21:31] is the sub-list for method output_type
	11, // [11:21] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_pkg_journal_pb_journal_proto_init() }
func file_pkg_journal_pb_journal_proto_init() {
	if File_pkg_journal_pb_journal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_journal_pb_journal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJournalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJournalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditJournalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditJournalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditJournalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Journal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllJournalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllJournalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOneJournalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOneJournalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJournalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJournalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOneTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindOneTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_journal_pb_journal_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_journal_pb_journal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_journal_pb_journal_proto_goTypes,
		DependencyIndexes: file_pkg_journal_pb_journal_proto_depIdxs,
		MessageInfos:      file_pkg_journal_pb_journal_proto_msgTypes,
	}.Build()
	File_pkg_journal_pb_journal_proto = out.File
	file_pkg_journal_pb_journal_proto_rawDesc = nil
	file_pkg_journal_pb_journal_proto_goTypes = nil
	file_pkg_journal_pb_journal_proto_depIdxs = nil
}
