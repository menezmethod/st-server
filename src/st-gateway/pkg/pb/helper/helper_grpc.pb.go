// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: helper/helper.proto

package helper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	STHelper_AnalyzeFinancialData_FullMethodName   = "/helper.STHelper/AnalyzeFinancialData"
	STHelper_GetStockQuote_FullMethodName          = "/helper.STHelper/GetStockQuote"
	STHelper_GetHistoricalStockData_FullMethodName = "/helper.STHelper/GetHistoricalStockData"
)

// STHelperClient is the client API for STHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type STHelperClient interface {
	AnalyzeFinancialData(ctx context.Context, in *FinancialRequest, opts ...grpc.CallOption) (*FinancialResponse, error)
	GetStockQuote(ctx context.Context, in *StockQuoteRequest, opts ...grpc.CallOption) (*StockQuoteResponse, error)
	GetHistoricalStockData(ctx context.Context, in *HistoricalStockDataRequest, opts ...grpc.CallOption) (*HistoricalStockDataResponse, error)
}

type sTHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewSTHelperClient(cc grpc.ClientConnInterface) STHelperClient {
	return &sTHelperClient{cc}
}

func (c *sTHelperClient) AnalyzeFinancialData(ctx context.Context, in *FinancialRequest, opts ...grpc.CallOption) (*FinancialResponse, error) {
	out := new(FinancialResponse)
	err := c.cc.Invoke(ctx, STHelper_AnalyzeFinancialData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sTHelperClient) GetStockQuote(ctx context.Context, in *StockQuoteRequest, opts ...grpc.CallOption) (*StockQuoteResponse, error) {
	out := new(StockQuoteResponse)
	err := c.cc.Invoke(ctx, STHelper_GetStockQuote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sTHelperClient) GetHistoricalStockData(ctx context.Context, in *HistoricalStockDataRequest, opts ...grpc.CallOption) (*HistoricalStockDataResponse, error) {
	out := new(HistoricalStockDataResponse)
	err := c.cc.Invoke(ctx, STHelper_GetHistoricalStockData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// STHelperServer is the server API for STHelper service.
// All implementations must embed UnimplementedSTHelperServer
// for forward compatibility
type STHelperServer interface {
	AnalyzeFinancialData(context.Context, *FinancialRequest) (*FinancialResponse, error)
	GetStockQuote(context.Context, *StockQuoteRequest) (*StockQuoteResponse, error)
	GetHistoricalStockData(context.Context, *HistoricalStockDataRequest) (*HistoricalStockDataResponse, error)
	mustEmbedUnimplementedSTHelperServer()
}

// UnimplementedSTHelperServer must be embedded to have forward compatible implementations.
type UnimplementedSTHelperServer struct {
}

func (UnimplementedSTHelperServer) AnalyzeFinancialData(context.Context, *FinancialRequest) (*FinancialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeFinancialData not implemented")
}
func (UnimplementedSTHelperServer) GetStockQuote(context.Context, *StockQuoteRequest) (*StockQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockQuote not implemented")
}
func (UnimplementedSTHelperServer) GetHistoricalStockData(context.Context, *HistoricalStockDataRequest) (*HistoricalStockDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalStockData not implemented")
}
func (UnimplementedSTHelperServer) mustEmbedUnimplementedSTHelperServer() {}

// UnsafeSTHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to STHelperServer will
// result in compilation errors.
type UnsafeSTHelperServer interface {
	mustEmbedUnimplementedSTHelperServer()
}

func RegisterSTHelperServer(s grpc.ServiceRegistrar, srv STHelperServer) {
	s.RegisterService(&STHelper_ServiceDesc, srv)
}

func _STHelper_AnalyzeFinancialData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinancialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STHelperServer).AnalyzeFinancialData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: STHelper_AnalyzeFinancialData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STHelperServer).AnalyzeFinancialData(ctx, req.(*FinancialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _STHelper_GetStockQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STHelperServer).GetStockQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: STHelper_GetStockQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STHelperServer).GetStockQuote(ctx, req.(*StockQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _STHelper_GetHistoricalStockData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalStockDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STHelperServer).GetHistoricalStockData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: STHelper_GetHistoricalStockData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STHelperServer).GetHistoricalStockData(ctx, req.(*HistoricalStockDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// STHelper_ServiceDesc is the grpc.ServiceDesc for STHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var STHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helper.STHelper",
	HandlerType: (*STHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeFinancialData",
			Handler:    _STHelper_AnalyzeFinancialData_Handler,
		},
		{
			MethodName: "GetStockQuote",
			Handler:    _STHelper_GetStockQuote_Handler,
		},
		{
			MethodName: "GetHistoricalStockData",
			Handler:    _STHelper_GetHistoricalStockData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helper/helper.proto",
}
