// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: pkg/pb/journal.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JournalService_CreateJournal_FullMethodName   = "/journal.JournalService/CreateJournal"
	JournalService_DeleteJournal_FullMethodName   = "/journal.JournalService/DeleteJournal"
	JournalService_UpdateJournal_FullMethodName   = "/journal.JournalService/UpdateJournal"
	JournalService_FindAllJournals_FullMethodName = "/journal.JournalService/FindAllJournals"
	JournalService_FindOneJournal_FullMethodName  = "/journal.JournalService/FindOneJournal"
	JournalService_CreateTrade_FullMethodName     = "/journal.JournalService/CreateTrade"
	JournalService_UpdateTrade_FullMethodName     = "/journal.JournalService/UpdateTrade"
	JournalService_FindOneTrade_FullMethodName    = "/journal.JournalService/FindOneTrade"
	JournalService_FindAllTrades_FullMethodName   = "/journal.JournalService/FindAllTrades"
	JournalService_DeleteTrade_FullMethodName     = "/journal.JournalService/DeleteTrade"
)

// JournalServiceClient is the client API for JournalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JournalServiceClient interface {
	CreateJournal(ctx context.Context, in *CreateJournalRequest, opts ...grpc.CallOption) (*CreateJournalResponse, error)
	DeleteJournal(ctx context.Context, in *DeleteJournalRequest, opts ...grpc.CallOption) (*DeleteJournalResponse, error)
	UpdateJournal(ctx context.Context, in *UpdateJournalRequest, opts ...grpc.CallOption) (*UpdateJournalResponse, error)
	FindAllJournals(ctx context.Context, in *FindAllJournalsRequest, opts ...grpc.CallOption) (*FindAllJournalsResponse, error)
	FindOneJournal(ctx context.Context, in *FindOneJournalRequest, opts ...grpc.CallOption) (*FindOneJournalResponse, error)
	CreateTrade(ctx context.Context, in *CreateTradeRequest, opts ...grpc.CallOption) (*CreateTradeResponse, error)
	UpdateTrade(ctx context.Context, in *UpdateTradeRequest, opts ...grpc.CallOption) (*UpdateTradeResponse, error)
	FindOneTrade(ctx context.Context, in *FindOneTradeRequest, opts ...grpc.CallOption) (*FindOneTradeResponse, error)
	FindAllTrades(ctx context.Context, in *FindAllTradesRequest, opts ...grpc.CallOption) (*FindAllTradesResponse, error)
	DeleteTrade(ctx context.Context, in *DeleteTradeRequest, opts ...grpc.CallOption) (*DeleteTradeResponse, error)
}

type journalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJournalServiceClient(cc grpc.ClientConnInterface) JournalServiceClient {
	return &journalServiceClient{cc}
}

func (c *journalServiceClient) CreateJournal(ctx context.Context, in *CreateJournalRequest, opts ...grpc.CallOption) (*CreateJournalResponse, error) {
	out := new(CreateJournalResponse)
	err := c.cc.Invoke(ctx, JournalService_CreateJournal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) DeleteJournal(ctx context.Context, in *DeleteJournalRequest, opts ...grpc.CallOption) (*DeleteJournalResponse, error) {
	out := new(DeleteJournalResponse)
	err := c.cc.Invoke(ctx, JournalService_DeleteJournal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) UpdateJournal(ctx context.Context, in *UpdateJournalRequest, opts ...grpc.CallOption) (*UpdateJournalResponse, error) {
	out := new(UpdateJournalResponse)
	err := c.cc.Invoke(ctx, JournalService_UpdateJournal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) FindAllJournals(ctx context.Context, in *FindAllJournalsRequest, opts ...grpc.CallOption) (*FindAllJournalsResponse, error) {
	out := new(FindAllJournalsResponse)
	err := c.cc.Invoke(ctx, JournalService_FindAllJournals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) FindOneJournal(ctx context.Context, in *FindOneJournalRequest, opts ...grpc.CallOption) (*FindOneJournalResponse, error) {
	out := new(FindOneJournalResponse)
	err := c.cc.Invoke(ctx, JournalService_FindOneJournal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) CreateTrade(ctx context.Context, in *CreateTradeRequest, opts ...grpc.CallOption) (*CreateTradeResponse, error) {
	out := new(CreateTradeResponse)
	err := c.cc.Invoke(ctx, JournalService_CreateTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) UpdateTrade(ctx context.Context, in *UpdateTradeRequest, opts ...grpc.CallOption) (*UpdateTradeResponse, error) {
	out := new(UpdateTradeResponse)
	err := c.cc.Invoke(ctx, JournalService_UpdateTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) FindOneTrade(ctx context.Context, in *FindOneTradeRequest, opts ...grpc.CallOption) (*FindOneTradeResponse, error) {
	out := new(FindOneTradeResponse)
	err := c.cc.Invoke(ctx, JournalService_FindOneTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) FindAllTrades(ctx context.Context, in *FindAllTradesRequest, opts ...grpc.CallOption) (*FindAllTradesResponse, error) {
	out := new(FindAllTradesResponse)
	err := c.cc.Invoke(ctx, JournalService_FindAllTrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) DeleteTrade(ctx context.Context, in *DeleteTradeRequest, opts ...grpc.CallOption) (*DeleteTradeResponse, error) {
	out := new(DeleteTradeResponse)
	err := c.cc.Invoke(ctx, JournalService_DeleteTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JournalServiceServer is the server API for JournalService service.
// All implementations must embed UnimplementedJournalServiceServer
// for forward compatibility
type JournalServiceServer interface {
	CreateJournal(context.Context, *CreateJournalRequest) (*CreateJournalResponse, error)
	DeleteJournal(context.Context, *DeleteJournalRequest) (*DeleteJournalResponse, error)
	UpdateJournal(context.Context, *UpdateJournalRequest) (*UpdateJournalResponse, error)
	FindAllJournals(context.Context, *FindAllJournalsRequest) (*FindAllJournalsResponse, error)
	FindOneJournal(context.Context, *FindOneJournalRequest) (*FindOneJournalResponse, error)
	CreateTrade(context.Context, *CreateTradeRequest) (*CreateTradeResponse, error)
	UpdateTrade(context.Context, *UpdateTradeRequest) (*UpdateTradeResponse, error)
	FindOneTrade(context.Context, *FindOneTradeRequest) (*FindOneTradeResponse, error)
	FindAllTrades(context.Context, *FindAllTradesRequest) (*FindAllTradesResponse, error)
	DeleteTrade(context.Context, *DeleteTradeRequest) (*DeleteTradeResponse, error)
	mustEmbedUnimplementedJournalServiceServer()
}

// UnimplementedJournalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJournalServiceServer struct {
}

func (UnimplementedJournalServiceServer) CreateJournal(context.Context, *CreateJournalRequest) (*CreateJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJournal not implemented")
}
func (UnimplementedJournalServiceServer) DeleteJournal(context.Context, *DeleteJournalRequest) (*DeleteJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJournal not implemented")
}
func (UnimplementedJournalServiceServer) UpdateJournal(context.Context, *UpdateJournalRequest) (*UpdateJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJournal not implemented")
}
func (UnimplementedJournalServiceServer) FindAllJournals(context.Context, *FindAllJournalsRequest) (*FindAllJournalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllJournals not implemented")
}
func (UnimplementedJournalServiceServer) FindOneJournal(context.Context, *FindOneJournalRequest) (*FindOneJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneJournal not implemented")
}
func (UnimplementedJournalServiceServer) CreateTrade(context.Context, *CreateTradeRequest) (*CreateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrade not implemented")
}
func (UnimplementedJournalServiceServer) UpdateTrade(context.Context, *UpdateTradeRequest) (*UpdateTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrade not implemented")
}
func (UnimplementedJournalServiceServer) FindOneTrade(context.Context, *FindOneTradeRequest) (*FindOneTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneTrade not implemented")
}
func (UnimplementedJournalServiceServer) FindAllTrades(context.Context, *FindAllTradesRequest) (*FindAllTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTrades not implemented")
}
func (UnimplementedJournalServiceServer) DeleteTrade(context.Context, *DeleteTradeRequest) (*DeleteTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrade not implemented")
}
func (UnimplementedJournalServiceServer) mustEmbedUnimplementedJournalServiceServer() {}

// UnsafeJournalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JournalServiceServer will
// result in compilation errors.
type UnsafeJournalServiceServer interface {
	mustEmbedUnimplementedJournalServiceServer()
}

func RegisterJournalServiceServer(s grpc.ServiceRegistrar, srv JournalServiceServer) {
	s.RegisterService(&JournalService_ServiceDesc, srv)
}

func _JournalService_CreateJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).CreateJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_CreateJournal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).CreateJournal(ctx, req.(*CreateJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_DeleteJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).DeleteJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_DeleteJournal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).DeleteJournal(ctx, req.(*DeleteJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_UpdateJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).UpdateJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_UpdateJournal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).UpdateJournal(ctx, req.(*UpdateJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_FindAllJournals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllJournalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).FindAllJournals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_FindAllJournals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).FindAllJournals(ctx, req.(*FindAllJournalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_FindOneJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).FindOneJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_FindOneJournal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).FindOneJournal(ctx, req.(*FindOneJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_CreateTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).CreateTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_CreateTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).CreateTrade(ctx, req.(*CreateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_UpdateTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).UpdateTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_UpdateTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).UpdateTrade(ctx, req.(*UpdateTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_FindOneTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).FindOneTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_FindOneTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).FindOneTrade(ctx, req.(*FindOneTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_FindAllTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).FindAllTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_FindAllTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).FindAllTrades(ctx, req.(*FindAllTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_DeleteTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).DeleteTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JournalService_DeleteTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).DeleteTrade(ctx, req.(*DeleteTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JournalService_ServiceDesc is the grpc.ServiceDesc for JournalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JournalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "journal.JournalService",
	HandlerType: (*JournalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJournal",
			Handler:    _JournalService_CreateJournal_Handler,
		},
		{
			MethodName: "DeleteJournal",
			Handler:    _JournalService_DeleteJournal_Handler,
		},
		{
			MethodName: "UpdateJournal",
			Handler:    _JournalService_UpdateJournal_Handler,
		},
		{
			MethodName: "FindAllJournals",
			Handler:    _JournalService_FindAllJournals_Handler,
		},
		{
			MethodName: "FindOneJournal",
			Handler:    _JournalService_FindOneJournal_Handler,
		},
		{
			MethodName: "CreateTrade",
			Handler:    _JournalService_CreateTrade_Handler,
		},
		{
			MethodName: "UpdateTrade",
			Handler:    _JournalService_UpdateTrade_Handler,
		},
		{
			MethodName: "FindOneTrade",
			Handler:    _JournalService_FindOneTrade_Handler,
		},
		{
			MethodName: "FindAllTrades",
			Handler:    _JournalService_FindAllTrades_Handler,
		},
		{
			MethodName: "DeleteTrade",
			Handler:    _JournalService_DeleteTrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/journal.proto",
}
